!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(1));document.addEventListener("DOMContentLoaded",(function(){(new i.default).render()}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0});const i=r(n(2)),o=r(n(3)),a=r(n(5));t.default=class{constructor(){this.canvas=document.createElement("canvas"),this.circles=[],this.dimension={width:768,height:512},this.addCircle=o.default(()=>{this.circles.push(new i.default(10*Math.random()+10,a.default()))},50),this.removeCircle=o.default(()=>{this.circles.pop()},50),this.drawCircle=function(e){const{location:{x:t,y:n},radius:r,color:i}=e;this.fillStyle=i,this.beginPath(),this.arc(t,n,r,0,2*Math.PI),this.fill()}.bind(this.context),this.updateCircle=function(e){const{location:{x:t,y:n},radius:r}=e,{width:i,height:o}=this;(t+r>=i||t-r<=0)&&e.bounceX(),(n+r>=o||n-r<=0)&&e.bounceY(),e.update()}.bind(this.dimension);const e=document.getElementById("app-container"),t=window.devicePixelRatio,{width:n,height:r}=this.dimension;this.canvas.width=n*t,this.canvas.height=r*t,this.canvas.id="main-canvas",this.context.scale(t,t),this.canvas.tabIndex=1,this.canvas.autofocus=!0,e.appendChild(this.canvas);const u=document.createElement("button");u.onclick=this.addCircle.bind(this),u.innerText="Add Circle",e.appendChild(u);const c=document.createElement("button");c.onclick=this.removeCircle.bind(this),c.innerText="Remove Circle",e.appendChild(c);this.canvas.addEventListener("keydown",e=>{e.isComposing||(" "===e.key?this.addCircle():"Backspace"===e.key&&this.removeCircle())})}get context(){return this.canvas.getContext("2d")}render(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.circles.forEach(e=>{this.updateCircle(e),this.drawCircle(e)}),requestAnimationFrame(()=>this.render())}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=class{constructor(e,t,n={dx:10*Math.random()-5,dy:10*Math.random()-5}){this.radius=e,this.color=t,this._location={x:300,y:200},this.velocity=n}update(){const{dx:e,dy:t}=this.velocity,{x:n,y:r}=this._location;this._location={x:e+n,y:t+r}}bounceX(){this.velocity.dx*=-1}bounceY(){this.velocity.dy*=-1}get location(){return this._location}}},function(e,t,n){(function(t){var n=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,o=/^0o[0-7]+$/i,a=parseInt,u="object"==typeof t&&t&&t.Object===Object&&t,c="object"==typeof self&&self&&self.Object===Object&&self,s=u||c||Function("return this")(),l=Object.prototype.toString,f=Math.max,h=Math.min,d=function(){return s.Date.now()};function v(e,t,n){var r,i,o,a,u,c,s=0,l=!1,v=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function m(t){var n=r,o=i;return r=i=void 0,s=t,a=e.apply(o,n)}function y(e){return s=e,u=setTimeout(x,t),l?m(e):a}function w(e){var n=e-c;return void 0===c||n>=t||n<0||v&&e-s>=o}function x(){var e=d();if(w(e))return M(e);u=setTimeout(x,function(e){var n=t-(e-c);return v?h(n,o-(e-s)):n}(e))}function M(e){return u=void 0,g&&r?m(e):(r=i=void 0,a)}function _(){var e=d(),n=w(e);if(r=arguments,i=this,c=e,n){if(void 0===u)return y(c);if(v)return u=setTimeout(x,t),m(c)}return void 0===u&&(u=setTimeout(x,t)),a}return t=b(t)||0,p(n)&&(l=!!n.leading,o=(v="maxWait"in n)?f(b(n.maxWait)||0,t):o,g="trailing"in n?!!n.trailing:g),_.cancel=function(){void 0!==u&&clearTimeout(u),s=0,r=c=i=u=void 0},_.flush=function(){return void 0===u?a:M(d())},_}function p(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function b(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==l.call(e)}(e))return NaN;if(p(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=p(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var u=i.test(e);return u||o.test(e)?a(e.slice(2),u?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return p(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),v(e,t,{leading:r,maxWait:t,trailing:i})}}).call(this,n(4))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e){var n;n=function(){var e=null,t={};a("monochrome",null,[[0,0],[100,0]]),a("red",[-26,18],[[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]),a("orange",[19,46],[[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]),a("yellow",[47,62],[[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]),a("green",[63,178],[[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]),a("blue",[179,257],[[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]),a("purple",[258,282],[[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]),a("pink",[283,334],[[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]);var n=[],r=function(a){if(void 0!==(a=a||{}).seed&&null!==a.seed&&a.seed===parseInt(a.seed,10))e=a.seed;else if("string"==typeof a.seed)e=function(e){for(var t=0,n=0;n!==e.length&&!(t>=Number.MAX_SAFE_INTEGER);n++)t+=e.charCodeAt(n);return t}(a.seed);else{if(void 0!==a.seed&&null!==a.seed)throw new TypeError("The seed value must be an integer or string");e=null}var l,f;if(null!==a.count&&void 0!==a.count){for(var h=a.count,d=[],v=0;v<a.count;v++)n.push(!1);for(a.count=null;h>d.length;)e&&a.seed&&(a.seed+=1),d.push(r(a));return a.count=h,d}return function(e,t){switch(t.format){case"hsvArray":return e;case"hslArray":return s(e);case"hsl":var n=s(e);return"hsl("+n[0]+", "+n[1]+"%, "+n[2]+"%)";case"hsla":var r=s(e),i=t.alpha||Math.random();return"hsla("+r[0]+", "+r[1]+"%, "+r[2]+"%, "+i+")";case"rgbArray":return u(e);case"rgb":return"rgb("+u(e).join(", ")+")";case"rgba":var o=u(e);return i=t.alpha||Math.random(),"rgba("+o.join(", ")+", "+i+")";default:return function(e){var t=u(e);function n(e){var t=e.toString(16);return 1==t.length?"0"+t:t}return"#"+n(t[0])+n(t[1])+n(t[2])}(e)}}([l=function(e){if(n.length>0){var r=o(f=function(e){if(isNaN(e)){if("string"==typeof e)if(t[e]){var n=t[e];if(n.hueRange)return n.hueRange}else if(e.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i))return i(c(e)[0]).hueRange}else{var r=parseInt(e);if(r<360&&r>0)return i(e).hueRange}return[0,360]}(e.hue)),a=(f[1]-f[0])/n.length,u=parseInt((r-f[0])/a);!0===n[u]?u=(u+2)%n.length:n[u]=!0;var s=(f[0]+u*a)%359,l=(f[0]+(u+1)*a)%359;return(r=o(f=[s,l]))<0&&(r=360+r),r}var f=function(e){if("number"==typeof parseInt(e)){var n=parseInt(e);if(n<360&&n>0)return[n,n]}if("string"==typeof e)if(t[e]){var r=t[e];if(r.hueRange)return r.hueRange}else if(e.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)){var i=c(e)[0];return[i,i]}return[0,360]}(e.hue);return(r=o(f))<0&&(r=360+r),r}(a),f=function(e,t){if("monochrome"===t.hue)return 0;if("random"===t.luminosity)return o([0,100]);var n=function(e){return i(e).saturationRange}(e),r=n[0],a=n[1];switch(t.luminosity){case"bright":r=55;break;case"dark":r=a-10;break;case"light":a=55}return o([r,a])}(l,a),function(e,t,n){var r=function(e,t){for(var n=i(e).lowerBounds,r=0;r<n.length-1;r++){var o=n[r][0],a=n[r][1],u=n[r+1][0],c=n[r+1][1];if(t>=o&&t<=u){var s=(c-a)/(u-o);return s*t+(a-s*o)}}return 0}(e,t),a=100;switch(n.luminosity){case"dark":a=r+20;break;case"light":r=(a+r)/2;break;case"random":r=0,a=100}return o([r,a])}(l,f,a)],a)};function i(e){for(var n in e>=334&&e<=360&&(e-=360),t){var r=t[n];if(r.hueRange&&e>=r.hueRange[0]&&e<=r.hueRange[1])return t[n]}return"Color not found"}function o(t){if(null===e){var n=Math.random();return n+=.618033988749895,n%=1,Math.floor(t[0]+n*(t[1]+1-t[0]))}var r=t[1]||1,i=t[0]||0,o=(e=(9301*e+49297)%233280)/233280;return Math.floor(i+o*(r-i))}function a(e,n,r){var i=r[0][0],o=r[r.length-1][0],a=r[r.length-1][1],u=r[0][1];t[e]={hueRange:n,lowerBounds:r,saturationRange:[i,o],brightnessRange:[a,u]}}function u(e){var t=e[0];0===t&&(t=1),360===t&&(t=359),t/=360;var n=e[1]/100,r=e[2]/100,i=Math.floor(6*t),o=6*t-i,a=r*(1-n),u=r*(1-o*n),c=r*(1-(1-o)*n),s=256,l=256,f=256;switch(i){case 0:s=r,l=c,f=a;break;case 1:s=u,l=r,f=a;break;case 2:s=a,l=r,f=c;break;case 3:s=a,l=u,f=r;break;case 4:s=c,l=a,f=r;break;case 5:s=r,l=a,f=u}return[Math.floor(255*s),Math.floor(255*l),Math.floor(255*f)]}function c(e){e=3===(e=e.replace(/^#/,"")).length?e.replace(/(.)/g,"$1$1"):e;var t=parseInt(e.substr(0,2),16)/255,n=parseInt(e.substr(2,2),16)/255,r=parseInt(e.substr(4,2),16)/255,i=Math.max(t,n,r),o=i-Math.min(t,n,r),a=i?o/i:0;switch(i){case t:return[(n-r)/o%6*60||0,a,i];case n:return[60*((r-t)/o+2)||0,a,i];case r:return[60*((t-n)/o+4)||0,a,i]}}function s(e){var t=e[0],n=e[1]/100,r=e[2]/100,i=(2-n)*r;return[t,Math.round(n*r/(i<1?i:2-i)*1e4)/100,i/2*100]}return r}(),e&&e.exports&&(t=e.exports=n),t.randomColor=n}).call(this,n(6)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,