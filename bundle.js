!function(e){var t={};function n(r){if(t[r])return t[r].exports;var i=t[r]={i:r,l:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.l=!0,i.exports}n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var i in e)n.d(r,i,function(t){return e[t]}.bind(null,i));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});const r=n(1);document.addEventListener("DOMContentLoaded",(function(){(new r.App).render()}))},function(e,t,n){"use strict";var r=this&&this.__importDefault||function(e){return e&&e.__esModule?e:{default:e}};Object.defineProperty(t,"__esModule",{value:!0}),t.App=void 0;const i=n(2),o=r(n(3)),a=r(n(5));t.App=class{constructor(){this.canvas=document.createElement("canvas"),this.circles=[],this.dimension={width:768,height:512},this.addCircle=o.default(()=>{this.circles.push(new i.Circle(10*Math.random()+10,a.default()))},50),this.removeCircle=o.default(()=>{this.circles.pop()},50),this.drawCircle=function(e){const{location:{x:t,y:n},radius:r,color:i}=e;this.fillStyle=i,this.beginPath(),this.arc(t,n,r,0,2*Math.PI),this.fill()}.bind(this.context),this.updateCircle=function(e){const{location:{x:t,y:n},radius:r}=e,{width:i,height:o}=this;(t+r>=i||t-r<=0)&&e.bounceX(),(n+r>=o||n-r<=0)&&e.bounceY(),e.update()}.bind(this.dimension);const e=document.getElementById("app-container"),t=window.devicePixelRatio,{width:n,height:r}=this.dimension;this.canvas.width=n*t,this.canvas.height=r*t,this.canvas.id="main-canvas",this.context.scale(t,t),this.canvas.tabIndex=1,this.canvas.autofocus=!0,e.appendChild(this.canvas);const u=document.createElement("button");u.onclick=this.addCircle.bind(this),u.innerText="Add Circle",e.appendChild(u);const c=document.createElement("button");c.onclick=this.removeCircle.bind(this),c.innerText="Remove Circle",e.appendChild(c);this.canvas.addEventListener("keydown",e=>{e.isComposing||(" "===e.key?this.addCircle():"Backspace"===e.key&&this.removeCircle())})}get context(){return this.canvas.getContext("2d")}render(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height),this.circles.forEach(e=>{this.updateCircle(e),this.drawCircle(e)}),requestAnimationFrame(()=>this.render())}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.Circle=void 0;t.Circle=class{constructor(e,t,n={dx:10*Math.random()-5,dy:10*Math.random()-5}){this.radius=e,this.color=t,this._location={x:300,y:200},this.velocity=n}update(){const{dx:e,dy:t}=this.velocity,{x:n,y:r}=this._location;this._location={x:e+n,y:t+r}}bounceX(){this.velocity.dx*=-1}bounceY(){this.velocity.dy*=-1}get location(){return this._location}}},function(e,t,n){(function(t){var n=/^\s+|\s+$/g,r=/^[-+]0x[0-9a-f]+$/i,i=/^0b[01]+$/i,o=/^0o[0-7]+$/i,a=parseInt,u="object"==typeof t&&t&&t.Object===Object&&t,c="object"==typeof self&&self&&self.Object===Object&&self,s=u||c||Function("return this")(),l=Object.prototype.toString,f=Math.max,h=Math.min,d=function(){return s.Date.now()};function v(e,t,n){var r,i,o,a,u,c,s=0,l=!1,v=!1,g=!0;if("function"!=typeof e)throw new TypeError("Expected a function");function m(t){var n=r,o=i;return r=i=void 0,s=t,a=e.apply(o,n)}function y(e){return s=e,u=setTimeout(x,t),l?m(e):a}function w(e){var n=e-c;return void 0===c||n>=t||n<0||v&&e-s>=o}function x(){var e=d();if(w(e))return M(e);u=setTimeout(x,function(e){var n=t-(e-c);return v?h(n,o-(e-s)):n}(e))}function M(e){return u=void 0,g&&r?m(e):(r=i=void 0,a)}function j(){var e=d(),n=w(e);if(r=arguments,i=this,c=e,n){if(void 0===u)return y(c);if(v)return u=setTimeout(x,t),m(c)}return void 0===u&&(u=setTimeout(x,t)),a}return t=b(t)||0,p(n)&&(l=!!n.leading,o=(v="maxWait"in n)?f(b(n.maxWait)||0,t):o,g="trailing"in n?!!n.trailing:g),j.cancel=function(){void 0!==u&&clearTimeout(u),s=0,r=c=i=u=void 0},j.flush=function(){return void 0===u?a:M(d())},j}function p(e){var t=typeof e;return!!e&&("object"==t||"function"==t)}function b(e){if("number"==typeof e)return e;if(function(e){return"symbol"==typeof e||function(e){return!!e&&"object"==typeof e}(e)&&"[object Symbol]"==l.call(e)}(e))return NaN;if(p(e)){var t="function"==typeof e.valueOf?e.valueOf():e;e=p(t)?t+"":t}if("string"!=typeof e)return 0===e?e:+e;e=e.replace(n,"");var u=i.test(e);return u||o.test(e)?a(e.slice(2),u?2:8):r.test(e)?NaN:+e}e.exports=function(e,t,n){var r=!0,i=!0;if("function"!=typeof e)throw new TypeError("Expected a function");return p(n)&&(r="leading"in n?!!n.leading:r,i="trailing"in n?!!n.trailing:i),v(e,t,{leading:r,maxWait:t,trailing:i})}}).call(this,n(4))},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){(function(e){var n;n=function(){var e=null,t={};a("monochrome",null,[[0,0],[100,0]]),a("red",[-26,18],[[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]),a("orange",[19,46],[[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]),a("yellow",[47,62],[[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]),a("green",[63,178],[[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]),a("blue",[179,257],[[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]),a("purple",[258,282],[[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]),a("pink",[283,334],[[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]);var n=[],r=function(a){if(void 0!==(a=a||{}).seed&&null!==a.seed&&a.seed===parseInt(a.seed,10))e=a.seed;else if("string"==typeof a.seed)e=function(e){for(var t=0,n=0;n!==e.length&&!(t>=Number.MAX_SAFE_INTEGER);n++)t+=e.charCodeAt(n);return t}(a.seed);else{if(void 0!==a.seed&&null!==a.seed)throw new TypeError("The seed value must be an integer or string");e=null}var l,f;if(null!==a.count&&void 0!==a.count){for(var h=a.count,d=[],v=0;v<a.count;v++)n.push(!1);for(a.count=null;h>d.length;)e&&a.seed&&(a.seed+=1),d.push(r(a));return a.count=h,d}return function(e,t){switch(t.format){case"hsvArray":return e;case"hslArray":return s(e);case"hsl":var n=s(e);return"hsl("+n[0]+", "+n[1]+"%, "+n[2]+"%)";case"hsla":var r=s(e),i=t.alpha||Math.random();return"hsla("+r[0]+", "+r[1]+"%, "+r[2]+"%, "+i+")";case"rgbArray":return u(e);case"rgb":return"rgb("+u(e).join(", ")+")";case"rgba":var o=u(e);return i=t.alpha||Math.random(),"rgba("+o.join(", ")+", "+i+")";default:return function(e){var t=u(e);function n(e){var t=e.toString(16);return 1==t.length?"0"+t:t}return"#"+n(t[0])+n(t[1])+n(t[2])}(e)}}([l=function(e){if(n.length>0){var r=o(f=function(e){if(isNaN(e)){if("string"==typeof e)if(t[e]){var n=t[e];if(n.hueRange)return n.hueRange}else if(e.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i))return i(c(e)[0]).hueRange}else{var r=parseInt(e);if(r<360&&r>0)return i(e).hueRange}return[0,360]}(e.hue)),a=(f[1]-f[0])/n.length,u=parseInt((r-f[0])/a);!0===n[u]?u=(u+2)%n.length:n[u]=!0;var s=(f[0]+u*a)%359,l=(f[0]+(u+1)*a)%359;return(r=o(f=[s,l]))<0&&(r=360+r),r}var f=function(e){if("number"==typeof parseInt(e)){var n=parseInt(e);if(n<360&&n>0)return[n,n]}if("string"==typeof e)if(t[e]){var r=t[e];if(r.hueRange)return r.hueRange}else if(e.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)){var i=c(e)[0];return[i,i]}return[0,360]}(e.hue);return(r=o(f))<0&&(r=360+r),r}(a),f=function(e,t){if("monochrome"===t.hue)return 0;if("random"===t.luminosity)return o([0,100]);var n=function(e){return i(e).saturationRange}(e),r=n[0],a=n[1];switch(t.luminosity){case"bright":r=55;break;case"dark":r=a-10;break;case"light":a=55}return o([r,a])}(l,a),function(e,t,n){var r=function(e,t){for(var n=i(e).lowerBounds,r=0;r<n.length-1;r++){var o=n[r][0],a=n[r][1],u=n[r+1][0],c=n[r+1][1];if(t>=o&&t<=u){var s=(c-a)/(u-o);return s*t+(a-s*o)}}return 0}(e,t),a=100;switch(n.luminosity){case"dark":a=r+20;break;case"light":r=(a+r)/2;break;case"random":r=0,a=100}return o([r,a])}(l,f,a)],a)};function i(e){for(var n in e>=334&&e<=360&&(e-=360),t){var r=t[n];if(r.hueRange&&e>=r.hueRange[0]&&e<=r.hueRange[1])return t[n]}return"Color not found"}function o(t){if(null===e){var n=Math.random();return n+=.618033988749895,n%=1,Math.floor(t[0]+n*(t[1]+1-t[0]))}var r=t[1]||1,i=t[0]||0,o=(e=(9301*e+49297)%233280)/233280;return Math.floor(i+o*(r-i))}function a(e,n,r){var i=r[0][0],o=r[r.length-1][0],a=r[r.length-1][1],u=r[0][1];t[e]={hueRange:n,lowerBounds:r,saturationRange:[i,o],brightnessRange:[a,u]}}function u(e){var t=e[0];0===t&&(t=1),360===t&&(t=359),t/=360;var n=e[1]/100,r=e[2]/100,i=Math.floor(6*t),o=6*t-i,a=r*(1-n),u=r*(1-o*n),c=r*(1-(1-o)*n),s=256,l=256,f=256;switch(i){case 0:s=r,l=c,f=a;break;case 1:s=u,l=r,f=a;break;case 2:s=a,l=r,f=c;break;case 3:s=a,l=u,f=r;break;case 4:s=c,l=a,f=r;break;case 5:s=r,l=a,f=u}return[Math.floor(255*s),Math.floor(255*l),Math.floor(255*f)]}function c(e){e=3===(e=e.replace(/^#/,"")).length?e.replace(/(.)/g,"$1$1"):e;var t=parseInt(e.substr(0,2),16)/255,n=parseInt(e.substr(2,2),16)/255,r=parseInt(e.substr(4,2),16)/255,i=Math.max(t,n,r),o=i-Math.min(t,n,r),a=i?o/i:0;switch(i){case t:return[(n-r)/o%6*60||0,a,i];case n:return[60*((r-t)/o+2)||0,a,i];case r:return[60*((t-n)/o+4)||0,a,i]}}function s(e){var t=e[0],n=e[1]/100,r=e[2]/100,i=(2-n)*r;return[t,Math.round(n*r/(i<1?i:2-i)*1e4)/100,i/2*100]}return r}(),e&&e.exports&&(t=e.exports=n),t.randomColor=n}).call(this,n(6)(e))},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vLy4vc3JjL2luZGV4LnRzIiwid2VicGFjazovLy8uL3NyYy9hcHAudHMiLCJ3ZWJwYWNrOi8vLy4vc3JjL2NpcmNsZS50cyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvbG9kYXNoLnRocm90dGxlL2luZGV4LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiLCJ3ZWJwYWNrOi8vLy4vbm9kZV9tb2R1bGVzL3JhbmRvbWNvbG9yL3JhbmRvbUNvbG9yLmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9tb2R1bGUuanMiXSwibmFtZXMiOlsiaW5zdGFsbGVkTW9kdWxlcyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImV4cG9ydHMiLCJtb2R1bGUiLCJpIiwibCIsIm1vZHVsZXMiLCJjYWxsIiwibSIsImMiLCJkIiwibmFtZSIsImdldHRlciIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnZXQiLCJyIiwiU3ltYm9sIiwidG9TdHJpbmdUYWciLCJ2YWx1ZSIsInQiLCJtb2RlIiwiX19lc01vZHVsZSIsIm5zIiwiY3JlYXRlIiwia2V5IiwiYmluZCIsIm4iLCJvYmplY3QiLCJwcm9wZXJ0eSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwicCIsInMiLCJkb2N1bWVudCIsImFkZEV2ZW50TGlzdGVuZXIiLCJBcHAiLCJyZW5kZXIiLCJjYW52YXMiLCJjcmVhdGVFbGVtZW50IiwiY2lyY2xlcyIsImRpbWVuc2lvbiIsIndpZHRoIiwiaGVpZ2h0IiwiYWRkQ2lyY2xlIiwidGhpcyIsInB1c2giLCJDaXJjbGUiLCJNYXRoIiwicmFuZG9tIiwicmVtb3ZlQ2lyY2xlIiwicG9wIiwiZHJhd0NpcmNsZSIsImNpcmNsZSIsImxvY2F0aW9uIiwieCIsInkiLCJyYWRpdXMiLCJjb2xvciIsImZpbGxTdHlsZSIsImJlZ2luUGF0aCIsImFyYyIsIlBJIiwiZmlsbCIsImNvbnRleHQiLCJ1cGRhdGVDaXJjbGUiLCJib3VuY2VYIiwiYm91bmNlWSIsInVwZGF0ZSIsImFwcENvbnRhaW5lciIsImdldEVsZW1lbnRCeUlkIiwiZHByIiwid2luZG93IiwiZGV2aWNlUGl4ZWxSYXRpbyIsImlkIiwic2NhbGUiLCJ0YWJJbmRleCIsImF1dG9mb2N1cyIsImFwcGVuZENoaWxkIiwiYWRkQ2lyY2xlQnV0dG9uIiwib25jbGljayIsImlubmVyVGV4dCIsInJlbW92ZUNpcmNsZUJ1dHRvbiIsImV2ZW50IiwiaXNDb21wb3NpbmciLCJnZXRDb250ZXh0IiwiY2xlYXJSZWN0IiwiZm9yRWFjaCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsInZlbG9jaXR5IiwiZHgiLCJkeSIsIl9sb2NhdGlvbiIsInJlVHJpbSIsInJlSXNCYWRIZXgiLCJyZUlzQmluYXJ5IiwicmVJc09jdGFsIiwiZnJlZVBhcnNlSW50IiwicGFyc2VJbnQiLCJmcmVlR2xvYmFsIiwiZ2xvYmFsIiwiZnJlZVNlbGYiLCJzZWxmIiwicm9vdCIsIkZ1bmN0aW9uIiwib2JqZWN0VG9TdHJpbmciLCJ0b1N0cmluZyIsIm5hdGl2ZU1heCIsIm1heCIsIm5hdGl2ZU1pbiIsIm1pbiIsIm5vdyIsIkRhdGUiLCJkZWJvdW5jZSIsImZ1bmMiLCJ3YWl0Iiwib3B0aW9ucyIsImxhc3RBcmdzIiwibGFzdFRoaXMiLCJtYXhXYWl0IiwicmVzdWx0IiwidGltZXJJZCIsImxhc3RDYWxsVGltZSIsImxhc3RJbnZva2VUaW1lIiwibGVhZGluZyIsIm1heGluZyIsInRyYWlsaW5nIiwiVHlwZUVycm9yIiwiaW52b2tlRnVuYyIsInRpbWUiLCJhcmdzIiwidGhpc0FyZyIsInVuZGVmaW5lZCIsImFwcGx5IiwibGVhZGluZ0VkZ2UiLCJzZXRUaW1lb3V0IiwidGltZXJFeHBpcmVkIiwic2hvdWxkSW52b2tlIiwidGltZVNpbmNlTGFzdENhbGwiLCJ0cmFpbGluZ0VkZ2UiLCJyZW1haW5pbmdXYWl0IiwiZGVib3VuY2VkIiwiaXNJbnZva2luZyIsImFyZ3VtZW50cyIsInRvTnVtYmVyIiwiaXNPYmplY3QiLCJjYW5jZWwiLCJjbGVhclRpbWVvdXQiLCJmbHVzaCIsInR5cGUiLCJpc09iamVjdExpa2UiLCJpc1N5bWJvbCIsIm90aGVyIiwidmFsdWVPZiIsInJlcGxhY2UiLCJpc0JpbmFyeSIsInRlc3QiLCJzbGljZSIsImciLCJlIiwicmFuZG9tQ29sb3IiLCJzZWVkIiwiY29sb3JEaWN0aW9uYXJ5IiwiZGVmaW5lQ29sb3IiLCJjb2xvclJhbmdlcyIsInN0cmluZyIsInRvdGFsIiwibGVuZ3RoIiwiTnVtYmVyIiwiTUFYX1NBRkVfSU5URUdFUiIsImNoYXJDb2RlQXQiLCJzdHJpbmdUb0ludGVnZXIiLCJIIiwiUyIsImNvdW50IiwidG90YWxDb2xvcnMiLCJjb2xvcnMiLCJoc3YiLCJmb3JtYXQiLCJIU1Z0b0hTTCIsImhzbCIsImhzbENvbG9yIiwiYWxwaGEiLCJIU1Z0b1JHQiIsImpvaW4iLCJyZ2JDb2xvciIsInJnYiIsImNvbXBvbmVudFRvSGV4IiwiaGV4IiwiSFNWdG9IZXgiLCJzZXRGb3JtYXQiLCJodWUiLCJyYW5kb21XaXRoaW4iLCJodWVSYW5nZSIsImNvbG9ySHVlIiwiaXNOYU4iLCJtYXRjaCIsImdldENvbG9ySW5mbyIsIkhleFRvSFNCIiwibnVtYmVyIiwiZ2V0UmVhbEh1ZVJhbmdlIiwic3RlcCIsImoiLCJjb2xvcklucHV0IiwiZ2V0SHVlUmFuZ2UiLCJwaWNrSHVlIiwibHVtaW5vc2l0eSIsInNhdHVyYXRpb25SYW5nZSIsImdldFNhdHVyYXRpb25SYW5nZSIsInNNaW4iLCJzTWF4IiwicGlja1NhdHVyYXRpb24iLCJiTWluIiwibG93ZXJCb3VuZHMiLCJzMSIsInYxIiwiczIiLCJ2MiIsImdldE1pbmltdW1CcmlnaHRuZXNzIiwiYk1heCIsInBpY2tCcmlnaHRuZXNzIiwiY29sb3JOYW1lIiwicmFuZ2UiLCJmbG9vciIsInJuZCIsImJyaWdodG5lc3NSYW5nZSIsImgiLCJ2IiwiaF9pIiwiZiIsInEiLCJiIiwicmVkIiwic3Vic3RyIiwiZ3JlZW4iLCJibHVlIiwiY01heCIsImRlbHRhIiwic2F0dXJhdGlvbiIsImsiLCJyb3VuZCIsImZhY3RvcnkiLCJ3ZWJwYWNrUG9seWZpbGwiLCJkZXByZWNhdGUiLCJwYXRocyIsImNoaWxkcmVuIl0sIm1hcHBpbmdzIjoiYUFDRSxJQUFJQSxFQUFtQixHQUd2QixTQUFTQyxFQUFvQkMsR0FHNUIsR0FBR0YsRUFBaUJFLEdBQ25CLE9BQU9GLEVBQWlCRSxHQUFVQyxRQUduQyxJQUFJQyxFQUFTSixFQUFpQkUsR0FBWSxDQUN6Q0csRUFBR0gsRUFDSEksR0FBRyxFQUNISCxRQUFTLElBVVYsT0FOQUksRUFBUUwsR0FBVU0sS0FBS0osRUFBT0QsUUFBU0MsRUFBUUEsRUFBT0QsUUFBU0YsR0FHL0RHLEVBQU9FLEdBQUksRUFHSkYsRUFBT0QsUUFLZkYsRUFBb0JRLEVBQUlGLEVBR3hCTixFQUFvQlMsRUFBSVYsRUFHeEJDLEVBQW9CVSxFQUFJLFNBQVNSLEVBQVNTLEVBQU1DLEdBQzNDWixFQUFvQmEsRUFBRVgsRUFBU1MsSUFDbENHLE9BQU9DLGVBQWViLEVBQVNTLEVBQU0sQ0FBRUssWUFBWSxFQUFNQyxJQUFLTCxLQUtoRVosRUFBb0JrQixFQUFJLFNBQVNoQixHQUNYLG9CQUFYaUIsUUFBMEJBLE9BQU9DLGFBQzFDTixPQUFPQyxlQUFlYixFQUFTaUIsT0FBT0MsWUFBYSxDQUFFQyxNQUFPLFdBRTdEUCxPQUFPQyxlQUFlYixFQUFTLGFBQWMsQ0FBRW1CLE9BQU8sS0FRdkRyQixFQUFvQnNCLEVBQUksU0FBU0QsRUFBT0UsR0FFdkMsR0FEVSxFQUFQQSxJQUFVRixFQUFRckIsRUFBb0JxQixJQUMvQixFQUFQRSxFQUFVLE9BQU9GLEVBQ3BCLEdBQVcsRUFBUEUsR0FBOEIsaUJBQVZGLEdBQXNCQSxHQUFTQSxFQUFNRyxXQUFZLE9BQU9ILEVBQ2hGLElBQUlJLEVBQUtYLE9BQU9ZLE9BQU8sTUFHdkIsR0FG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Q0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLE1BR3pFQSxFQUNFLFNBQ0EsQ0FBQyxHQUFHLElBQ0osQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksTUFHekRBLEVBQ0UsU0FDQSxDQUFDLEdBQUcsSUFDSixDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxNQUdqRUEsRUFDRSxRQUNBLENBQUMsR0FBRyxLQUNKLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxJQUFJLE1BR2pFQSxFQUNFLE9BQ0EsQ0FBQyxJQUFLLEtBQ04sQ0FBQyxDQUFDLEdBQUcsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLEdBQUcsSUFBSSxDQUFDLElBQUksTUFHekVBLEVBQ0UsU0FDQSxDQUFDLElBQUssS0FDTixDQUFDLENBQUMsR0FBRyxLQUFLLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsR0FBRyxJQUFJLENBQUMsSUFBSSxNQUd6RUEsRUFDRSxPQUNBLENBQUMsSUFBSyxLQUNOLENBQUMsQ0FBQyxHQUFHLEtBQUssQ0FBQyxHQUFHLElBQUksQ0FBQyxHQUFHLElBQUksQ0FB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QUFPZCxFQUFPRSxLQUdoQlMsT0FBT0MsZUFBZVosRUFBUSxLQUFNLENBQ25DYSxZQUFZLEVBQ1pDLElBQUssV0FDSixPQUFPZCxFQUFPQyxLQUdoQkQsRUFBT2lQLGdCQUFrQixHQUVuQmpQIiwiZmlsZSI6ImJ1bmRsZS5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGdldHRlciB9KTtcbiBcdFx0fVxuIFx0fTtcblxuIFx0Ly8gZGVmaW5lIF9fZXNNb2R1bGUgb24gZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yID0gZnVuY3Rpb24oZXhwb3J0cykge1xuIFx0XHRpZih0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBTeW1ib2wudG9TdHJpbmdUYWcpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgU3ltYm9sLnRvU3RyaW5nVGFnLCB7IHZhbHVlOiAnTW9kdWxlJyB9KTtcbiBcdFx0fVxuIFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuIFx0fTtcblxuIFx0Ly8gY3JlYXRlIGEgZmFrZSBuYW1lc3BhY2Ugb2JqZWN0XG4gXHQvLyBtb2RlICYgMTogdmFsdWUgaXMgYSBtb2R1bGUgaWQsIHJlcXVpcmUgaXRcbiBcdC8vIG1vZGUgJiAyOiBtZXJnZSBhbGwgcHJvcGVydGllcyBvZiB2YWx1ZSBpbnRvIHRoZSBuc1xuIFx0Ly8gbW9kZSAmIDQ6IHJldHVybiB2YWx1ZSB3aGVuIGFscmVhZHkgbnMgb2JqZWN0XG4gXHQvLyBtb2RlICYgOHwxOiBiZWhhdmUgbGlrZSByZXF1aXJlXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnQgPSBmdW5jdGlvbih2YWx1ZSwgbW9kZSkge1xuIFx0XHRpZihtb2RlICYgMSkgdmFsdWUgPSBfX3dlYnBhY2tfcmVxdWlyZV9fKHZhbHVlKTtcbiBcdFx0aWYobW9kZSAmIDgpIHJldHVybiB2YWx1ZTtcbiBcdFx0aWYoKG1vZGUgJiA0KSAmJiB0eXBlb2YgdmFsdWUgPT09ICdvYmplY3QnICYmIHZhbHVlICYmIHZhbHVlLl9fZXNNb2R1bGUpIHJldHVybiB2YWx1ZTtcbiBcdFx0dmFyIG5zID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5yKG5zKTtcbiBcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KG5zLCAnZGVmYXVsdCcsIHsgZW51bWVyYWJsZTogdHJ1ZSwgdmFsdWU6IHZhbHVlIH0pO1xuIFx0XHRpZihtb2RlICYgMiAmJiB0eXBlb2YgdmFsdWUgIT0gJ3N0cmluZycpIGZvcih2YXIga2V5IGluIHZhbHVlKSBfX3dlYnBhY2tfcmVxdWlyZV9fLmQobnMsIGtleSwgZnVuY3Rpb24oa2V5KSB7IHJldHVybiB2YWx1ZVtrZXldOyB9LmJpbmQobnVsbCwga2V5KSk7XG4gXHRcdHJldHVybiBucztcbiBcdH07XG5cbiBcdC8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSBmdW5jdGlvbihtb2R1bGUpIHtcbiBcdFx0dmFyIGdldHRlciA9IG1vZHVsZSAmJiBtb2R1bGUuX19lc01vZHVsZSA/XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0RGVmYXVsdCgpIHsgcmV0dXJuIG1vZHVsZVsnZGVmYXVsdCddOyB9IDpcbiBcdFx0XHRmdW5jdGlvbiBnZXRNb2R1bGVFeHBvcnRzKCkgeyByZXR1cm4gbW9kdWxlOyB9O1xuIFx0XHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCAnYScsIGdldHRlcik7XG4gXHRcdHJldHVybiBnZXR0ZXI7XG4gXHR9O1xuXG4gXHQvLyBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGxcbiBcdF9fd2VicGFja19yZXF1aXJlX18ubyA9IGZ1bmN0aW9uKG9iamVjdCwgcHJvcGVydHkpIHsgcmV0dXJuIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmplY3QsIHByb3BlcnR5KTsgfTtcblxuIFx0Ly8gX193ZWJwYWNrX3B1YmxpY19wYXRoX19cbiBcdF9fd2VicGFja19yZXF1aXJlX18ucCA9IFwiXCI7XG5cblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcbiIsImltcG9ydCB7IEFwcCB9IGZyb20gJy4vYXBwJztcblxuZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignRE9NQ29udGVudExvYWRlZCcsIGZ1bmN0aW9uICgpIHtcbiAgbmV3IEFwcCgpLnJlbmRlcigpO1xufSk7XG4iLCJpbXBvcnQgeyBDaXJjbGUgfSBmcm9tICcuL2NpcmNsZSc7XG5pbXBvcnQgdGhyb3R0bGUgZnJvbSAnbG9kYXNoLnRocm90dGxlJztcbmltcG9ydCByYW5kb21Db2xvciBmcm9tICdyYW5kb21jb2xvcic7XG5cbmV4cG9ydCBjbGFzcyBBcHAge1xuXG4gIHByaXZhdGUgY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImNhbnZhc1wiKTtcbiAgcHJpdmF0ZSBjaXJjbGVzOiBDaXJjbGVbXSA9IFtdO1xuICBwcml2YXRlIGRpbWVuc2lvbiA9IHsgd2lkdGg6IDc2OCwgaGVpZ2h0OiA1MTIgfTtcblxuICBjb25zdHJ1Y3RvcigpIHtcblxuICAgIGNvbnN0IGFwcENvbnRhaW5lciA9IGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKFwiYXBwLWNvbnRhaW5lclwiKSE7XG5cbiAgICBjb25zdCBkcHIgPSB3aW5kb3cuZGV2aWNlUGl4ZWxSYXRpbztcbiAgICBjb25zdCB7IHdpZHRoLCBoZWlnaHQgfSA9IHRoaXMuZGltZW5zaW9uO1xuICAgIHRoaXMuY2FudmFzLndpZHRoID0gd2lkdGggKiBkcHI7XG4gICAgdGhpcy5jYW52YXMuaGVpZ2h0ID0gaGVpZ2h0ICogZHByO1xuICAgIHRoaXMuY2FudmFzLmlkID0gXCJtYWluLWNhbnZhc1wiO1xuICAgIHRoaXMuY29udGV4dC5zY2FsZShkcHIsIGRwcik7XG4gICAgdGhpcy5jYW52YXMudGFiSW5kZXggPSAxO1xuICAgIHRoaXMuY2FudmFzLmF1dG9mb2N1cyA9IHRydWU7XG4gICAgYXBwQ29udGFpbmVyLmFwcGVuZENoaWxkKHRoaXMuY2FudmFzKTtcblxuICAgIGNvbnN0IGFkZENpcmNsZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgYWRkQ2lyY2xlQnV0dG9uLm9uY2xpY2sgPSB0aGlzLmFkZENpcmNsZS5iaW5kKHRoaXMpO1xuICAgIGFkZENpcmNsZUJ1dHRvbi5pbm5lclRleHQgPSBcIkFkZCBDaXJjbGVcIjtcbiAgICBhcHBDb250YWluZXIuYXBwZW5kQ2hpbGQoYWRkQ2lyY2xlQnV0dG9uKTtcblxuICAgIGNvbnN0IHJlbW92ZUNpcmNsZUJ1dHRvbiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XG4gICAgcmVtb3ZlQ2lyY2xlQnV0dG9uLm9uY2xpY2sgPSB0aGlzLnJlbW92ZUNpcmNsZS5iaW5kKHRoaXMpO1xuICAgIHJlbW92ZUNpcmNsZUJ1dHRvbi5pbm5lclRleHQgPSBcIlJlbW92ZSBDaXJjbGVcIjtcbiAgICBhcHBDb250YWluZXIuYXBwZW5kQ2hpbGQocmVtb3ZlQ2lyY2xlQnV0dG9uKTtcblxuICAgIGNvbnN0IGhhbmRsZXIgPSAoZXZlbnQ6IEtleWJvYXJkRXZlbnQpID0+IHtcbiAgICAgIGlmIChldmVudC5pc0NvbXBvc2luZykgcmV0dXJuO1xuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJyAnKSB7XG4gICAgICAgIHRoaXMuYWRkQ2lyY2xlKCk7XG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJ0JhY2tzcGFjZScpIHtcbiAgICAgICAgdGhpcy5yZW1vdmVDaXJjbGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgdGhpcy5jYW52YXMuYWRkRXZlbnRMaXN0ZW5lcihcImtleWRvd25cIiwgaGFuZGxlcik7XG4gIH1cblxuICBwcml2YXRlIGFkZENpcmNsZSA9IHRocm90dGxlKCgpID0+IHtcbiAgICB0aGlzLmNpcmNsZXMucHVzaChuZXcgQ2lyY2xlKE1hdGgucmFuZG9tKCkgKiAxMCArIDEwLCByYW5kb21Db2xvcigpKSk7XG4gIH0sIDUwKTtcblxuICBwcml2YXRlIHJlbW92ZUNpcmNsZSA9IHRocm90dGxlKCgpID0+IHtcbiAgICB0aGlzLmNpcmNsZXMucG9wKCk7XG4gIH0sIDUwKTtcblxuICBwcml2YXRlIGdldCBjb250ZXh0KCkge1xuICAgIHJldHVybiB0aGlzLmNhbnZhcy5nZXRDb250ZXh0KFwiMmRcIikhXG4gIH1cblxuICBwcml2YXRlIGRyYXdDaXJjbGUgPSBmdW5jdGlvbiAodGhpczogQ2FudmFzUmVuZGVyaW5nQ29udGV4dDJELCBjaXJjbGU6IENpcmNsZSkge1xuICAgIGNvbnN0IHsgbG9jYXRpb246IHsgeCwgeSB9LCByYWRpdXMsIGNvbG9yIH0gPSBjaXJjbGU7XG4gICAgdGhpcy5maWxsU3R5bGUgPSBjb2xvcjtcbiAgICB0aGlzLmJlZ2luUGF0aCgpO1xuICAgIHRoaXMuYXJjKHgsIHksIHJhZGl1cywgMCwgMiAqIE1hdGguUEkpO1xuICAgIHRoaXMuZmlsbCgpO1xuICB9LmJpbmQodGhpcy5jb250ZXh0KTtcblxuICBwcml2YXRlIHVwZGF0ZUNpcmNsZSA9IGZ1bmN0aW9uICh0aGlzOiB7IHdpZHRoOiBudW1iZXIsIGhlaWdodDogbnVtYmVyIH0sIGNpcmNsZTogQ2lyY2xlKSB7XG4gICAgY29uc3QgeyBsb2NhdGlvbjogeyB4LCB5IH0sIHJhZGl1cyB9ID0gY2lyY2xlO1xuICAgIGNvbnN0IHsgd2lkdGgsIGhlaWdodCB9ID0gdGhpcztcbiAgICBpZiAoeCArIHJhZGl1cyA+PSB3aWR0aCB8fCB4IC0gcmFkaXVzIDw9IDApIGNpcmNsZS5ib3VuY2VYKCk7XG4gICAgaWYgKHkgKyByYWRpdXMgPj0gaGVpZ2h0IHx8IHkgLSByYWRpdXMgPD0gMCkgY2lyY2xlLmJvdW5jZVkoKTtcbiAgICBjaXJjbGUudXBkYXRlKCk7XG4gIH0uYmluZCh0aGlzLmRpbWVuc2lvbik7XG5cbiAgcmVuZGVyKCkge1xuICAgIHRoaXMuY29udGV4dC5jbGVhclJlY3QoMCwgMCwgdGhpcy5jYW52YXMud2lkdGgsIHRoaXMuY2FudmFzLmhlaWdodCk7XG4gICAgdGhpcy5jaXJjbGVzLmZvckVhY2goY2lyY2xlID0+IHtcbiAgICAgIHRoaXMudXBkYXRlQ2lyY2xlKGNpcmNsZSk7XG4gICAgICB0aGlzLmRyYXdDaXJjbGUoY2lyY2xlKTtcbiAgICB9KTtcbiAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4gdGhpcy5yZW5kZXIoKSk7XG4gIH1cblxufSIsImV4cG9ydCBjbGFzcyBDaXJjbGUge1xuXG4gIHJlYWRvbmx5IHJhZGl1czogbnVtYmVyO1xuICByZWFkb25seSBjb2xvcjogc3RyaW5nO1xuICBwcml2YXRlIF9sb2NhdGlvbjogeyB4OiBudW1iZXIsIHk6IG51bWJlciB9O1xuICByZWFkb25seSB2ZWxvY2l0eTogeyBkeDogbnVtYmVyLCBkeTogbnVtYmVyIH07XG5cbiAgY29uc3RydWN0b3IoXG4gICAgcmFkaXVzOiBudW1iZXIsXG4gICAgY29sb3I6IHN0cmluZyxcbiAgICB2ZWxvY2l0eTogeyBkeDogbnVtYmVyLCBkeTogbnVtYmVyIH0gPSB7IGR4OiBNYXRoLnJhbmRvbSgpICogMTAgLSA1LCBkeTogTWF0aC5yYW5kb20oKSAqIDEwIC0gNSB9XG4gICkge1xuICAgIHRoaXMucmFkaXVzID0gcmFkaXVzO1xuICAgIHRoaXMuY29sb3IgPSBjb2xvcjtcbiAgICB0aGlzLl9sb2NhdGlvbiA9IHsgeDogMzAwLCB5OiAyMDAgfTtcbiAgICB0aGlzLnZlbG9jaXR5ID0gdmVsb2NpdHk7XG4gIH1cblxuICB1cGRhdGUoKSB7XG4gICAgY29uc3QgeyBkeCwgZHkgfSA9IHRoaXMudmVsb2NpdHk7XG4gICAgY29uc3QgeyB4LCB5IH0gPSB0aGlzLl9sb2NhdGlvbjtcbiAgICB0aGlzLl9sb2NhdGlvbiA9IHsgeDogZHggKyB4LCB5OiBkeSArIHkgfTtcbiAgfVxuXG4gIGJvdW5jZVgoKSB7XG4gICAgdGhpcy52ZWxvY2l0eS5keCAqPSAtMTtcbiAgfVxuXG4gIGJvdW5jZVkoKSB7XG4gICAgdGhpcy52ZWxvY2l0eS5keSAqPSAtMTtcbiAgfVxuXG5cbiAgZ2V0IGxvY2F0aW9uKCk6IHsgeDogbnVtYmVyOyB5OiBudW1iZXIgfSB7XG4gICAgcmV0dXJuIHRoaXMuX2xvY2F0aW9uO1xuICB9XG5cbn0iLCIvKipcbiAqIGxvZGFzaCAoQ3VzdG9tIEJ1aWxkKSA8aHR0cHM6Ly9sb2Rhc2guY29tLz5cbiAqIEJ1aWxkOiBgbG9kYXNoIG1vZHVsYXJpemUgZXhwb3J0cz1cIm5wbVwiIC1vIC4vYFxuICogQ29weXJpZ2h0IGpRdWVyeSBGb3VuZGF0aW9uIGFuZCBvdGhlciBjb250cmlidXRvcnMgPGh0dHBzOi8vanF1ZXJ5Lm9yZy8+XG4gKiBSZWxlYXNlZCB1bmRlciBNSVQgbGljZW5zZSA8aHR0cHM6Ly9sb2Rhc2guY29tL2xpY2Vuc2U+XG4gKiBCYXNlZCBvbiBVbmRlcnNjb3JlLmpzIDEuOC4zIDxodHRwOi8vdW5kZXJzY29yZWpzLm9yZy9MSUNFTlNFPlxuICogQ29weXJpZ2h0IEplcmVteSBBc2hrZW5hcywgRG9jdW1lbnRDbG91ZCBhbmQgSW52ZXN0aWdhdGl2ZSBSZXBvcnRlcnMgJiBFZGl0b3JzXG4gKi9cblxuLyoqIFVzZWQgYXMgdGhlIGBUeXBlRXJyb3JgIG1lc3NhZ2UgZm9yIFwiRnVuY3Rpb25zXCIgbWV0aG9kcy4gKi9cbnZhciBGVU5DX0VSUk9SX1RFWFQgPSAnRXhwZWN0ZWQgYSBmdW5jdGlvbic7XG5cbi8qKiBVc2VkIGFzIHJlZmVyZW5jZXMgZm9yIHZhcmlvdXMgYE51bWJlcmAgY29uc3RhbnRzLiAqL1xudmFyIE5BTiA9IDAgLyAwO1xuXG4vKiogYE9iamVjdCN0b1N0cmluZ2AgcmVzdWx0IHJlZmVyZW5jZXMuICovXG52YXIgc3ltYm9sVGFnID0gJ1tvYmplY3QgU3ltYm9sXSc7XG5cbi8qKiBVc2VkIHRvIG1hdGNoIGxlYWRpbmcgYW5kIHRyYWlsaW5nIHdoaXRlc3BhY2UuICovXG52YXIgcmVUcmltID0gL15cXHMrfFxccyskL2c7XG5cbi8qKiBVc2VkIHRvIGRldGVjdCBiYWQgc2lnbmVkIGhleGFkZWNpbWFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JhZEhleCA9IC9eWy0rXTB4WzAtOWEtZl0rJC9pO1xuXG4vKiogVXNlZCB0byBkZXRlY3QgYmluYXJ5IHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc0JpbmFyeSA9IC9eMGJbMDFdKyQvaTtcblxuLyoqIFVzZWQgdG8gZGV0ZWN0IG9jdGFsIHN0cmluZyB2YWx1ZXMuICovXG52YXIgcmVJc09jdGFsID0gL14wb1swLTddKyQvaTtcblxuLyoqIEJ1aWx0LWluIG1ldGhvZCByZWZlcmVuY2VzIHdpdGhvdXQgYSBkZXBlbmRlbmN5IG9uIGByb290YC4gKi9cbnZhciBmcmVlUGFyc2VJbnQgPSBwYXJzZUludDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBnbG9iYWxgIGZyb20gTm9kZS5qcy4gKi9cbnZhciBmcmVlR2xvYmFsID0gdHlwZW9mIGdsb2JhbCA9PSAnb2JqZWN0JyAmJiBnbG9iYWwgJiYgZ2xvYmFsLk9iamVjdCA9PT0gT2JqZWN0ICYmIGdsb2JhbDtcblxuLyoqIERldGVjdCBmcmVlIHZhcmlhYmxlIGBzZWxmYC4gKi9cbnZhciBmcmVlU2VsZiA9IHR5cGVvZiBzZWxmID09ICdvYmplY3QnICYmIHNlbGYgJiYgc2VsZi5PYmplY3QgPT09IE9iamVjdCAmJiBzZWxmO1xuXG4vKiogVXNlZCBhcyBhIHJlZmVyZW5jZSB0byB0aGUgZ2xvYmFsIG9iamVjdC4gKi9cbnZhciByb290ID0gZnJlZUdsb2JhbCB8fCBmcmVlU2VsZiB8fCBGdW5jdGlvbigncmV0dXJuIHRoaXMnKSgpO1xuXG4vKiogVXNlZCBmb3IgYnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMuICovXG52YXIgb2JqZWN0UHJvdG8gPSBPYmplY3QucHJvdG90eXBlO1xuXG4vKipcbiAqIFVzZWQgdG8gcmVzb2x2ZSB0aGVcbiAqIFtgdG9TdHJpbmdUYWdgXShodHRwOi8vZWNtYS1pbnRlcm5hdGlvbmFsLm9yZy9lY21hLTI2Mi83LjAvI3NlYy1vYmplY3QucHJvdG90eXBlLnRvc3RyaW5nKVxuICogb2YgdmFsdWVzLlxuICovXG52YXIgb2JqZWN0VG9TdHJpbmcgPSBvYmplY3RQcm90by50b1N0cmluZztcblxuLyogQnVpbHQtaW4gbWV0aG9kIHJlZmVyZW5jZXMgZm9yIHRob3NlIHdpdGggdGhlIHNhbWUgbmFtZSBhcyBvdGhlciBgbG9kYXNoYCBtZXRob2RzLiAqL1xudmFyIG5hdGl2ZU1heCA9IE1hdGgubWF4LFxuICAgIG5hdGl2ZU1pbiA9IE1hdGgubWluO1xuXG4vKipcbiAqIEdldHMgdGhlIHRpbWVzdGFtcCBvZiB0aGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0aGF0IGhhdmUgZWxhcHNlZCBzaW5jZVxuICogdGhlIFVuaXggZXBvY2ggKDEgSmFudWFyeSAxOTcwIDAwOjAwOjAwIFVUQykuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAyLjQuMFxuICogQGNhdGVnb3J5IERhdGVcbiAqIEByZXR1cm5zIHtudW1iZXJ9IFJldHVybnMgdGhlIHRpbWVzdGFtcC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5kZWZlcihmdW5jdGlvbihzdGFtcCkge1xuICogICBjb25zb2xlLmxvZyhfLm5vdygpIC0gc3RhbXApO1xuICogfSwgXy5ub3coKSk7XG4gKiAvLyA9PiBMb2dzIHRoZSBudW1iZXIgb2YgbWlsbGlzZWNvbmRzIGl0IHRvb2sgZm9yIHRoZSBkZWZlcnJlZCBpbnZvY2F0aW9uLlxuICovXG52YXIgbm93ID0gZnVuY3Rpb24oKSB7XG4gIHJldHVybiByb290LkRhdGUubm93KCk7XG59O1xuXG4vKipcbiAqIENyZWF0ZXMgYSBkZWJvdW5jZWQgZnVuY3Rpb24gdGhhdCBkZWxheXMgaW52b2tpbmcgYGZ1bmNgIHVudGlsIGFmdGVyIGB3YWl0YFxuICogbWlsbGlzZWNvbmRzIGhhdmUgZWxhcHNlZCBzaW5jZSB0aGUgbGFzdCB0aW1lIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb24gd2FzXG4gKiBpbnZva2VkLiBUaGUgZGVib3VuY2VkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYCBtZXRob2QgdG8gY2FuY2VsXG4gKiBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0byBpbW1lZGlhdGVseSBpbnZva2UgdGhlbS5cbiAqIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgIHNob3VsZCBiZSBpbnZva2VkIG9uIHRoZVxuICogbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgIHRpbWVvdXQuIFRoZSBgZnVuY2AgaXMgaW52b2tlZFxuICogd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbi4gU3Vic2VxdWVudFxuICogY2FsbHMgdG8gdGhlIGRlYm91bmNlZCBmdW5jdGlvbiByZXR1cm4gdGhlIHJlc3VsdCBvZiB0aGUgbGFzdCBgZnVuY2BcbiAqIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSBkZWJvdW5jZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8uZGVib3VuY2VgIGFuZCBgXy50aHJvdHRsZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byBkZWJvdW5jZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byBkZWxheS5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPWZhbHNlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIGxlYWRpbmcgZWRnZSBvZiB0aGUgdGltZW91dC5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbb3B0aW9ucy5tYXhXYWl0XVxuICogIFRoZSBtYXhpbXVtIHRpbWUgYGZ1bmNgIGlzIGFsbG93ZWQgdG8gYmUgZGVsYXllZCBiZWZvcmUgaXQncyBpbnZva2VkLlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyBkZWJvdW5jZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGNvc3RseSBjYWxjdWxhdGlvbnMgd2hpbGUgdGhlIHdpbmRvdyBzaXplIGlzIGluIGZsdXguXG4gKiBqUXVlcnkod2luZG93KS5vbigncmVzaXplJywgXy5kZWJvdW5jZShjYWxjdWxhdGVMYXlvdXQsIDE1MCkpO1xuICpcbiAqIC8vIEludm9rZSBgc2VuZE1haWxgIHdoZW4gY2xpY2tlZCwgZGVib3VuY2luZyBzdWJzZXF1ZW50IGNhbGxzLlxuICogalF1ZXJ5KGVsZW1lbnQpLm9uKCdjbGljaycsIF8uZGVib3VuY2Uoc2VuZE1haWwsIDMwMCwge1xuICogICAnbGVhZGluZyc6IHRydWUsXG4gKiAgICd0cmFpbGluZyc6IGZhbHNlXG4gKiB9KSk7XG4gKlxuICogLy8gRW5zdXJlIGBiYXRjaExvZ2AgaXMgaW52b2tlZCBvbmNlIGFmdGVyIDEgc2Vjb25kIG9mIGRlYm91bmNlZCBjYWxscy5cbiAqIHZhciBkZWJvdW5jZWQgPSBfLmRlYm91bmNlKGJhdGNoTG9nLCAyNTAsIHsgJ21heFdhaXQnOiAxMDAwIH0pO1xuICogdmFyIHNvdXJjZSA9IG5ldyBFdmVudFNvdXJjZSgnL3N0cmVhbScpO1xuICogalF1ZXJ5KHNvdXJjZSkub24oJ21lc3NhZ2UnLCBkZWJvdW5jZWQpO1xuICpcbiAqIC8vIENhbmNlbCB0aGUgdHJhaWxpbmcgZGVib3VuY2VkIGludm9jYXRpb24uXG4gKiBqUXVlcnkod2luZG93KS5vbigncG9wc3RhdGUnLCBkZWJvdW5jZWQuY2FuY2VsKTtcbiAqL1xuZnVuY3Rpb24gZGVib3VuY2UoZnVuYywgd2FpdCwgb3B0aW9ucykge1xuICB2YXIgbGFzdEFyZ3MsXG4gICAgICBsYXN0VGhpcyxcbiAgICAgIG1heFdhaXQsXG4gICAgICByZXN1bHQsXG4gICAgICB0aW1lcklkLFxuICAgICAgbGFzdENhbGxUaW1lLFxuICAgICAgbGFzdEludm9rZVRpbWUgPSAwLFxuICAgICAgbGVhZGluZyA9IGZhbHNlLFxuICAgICAgbWF4aW5nID0gZmFsc2UsXG4gICAgICB0cmFpbGluZyA9IHRydWU7XG5cbiAgaWYgKHR5cGVvZiBmdW5jICE9ICdmdW5jdGlvbicpIHtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKEZVTkNfRVJST1JfVEVYVCk7XG4gIH1cbiAgd2FpdCA9IHRvTnVtYmVyKHdhaXQpIHx8IDA7XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAhIW9wdGlvbnMubGVhZGluZztcbiAgICBtYXhpbmcgPSAnbWF4V2FpdCcgaW4gb3B0aW9ucztcbiAgICBtYXhXYWl0ID0gbWF4aW5nID8gbmF0aXZlTWF4KHRvTnVtYmVyKG9wdGlvbnMubWF4V2FpdCkgfHwgMCwgd2FpdCkgOiBtYXhXYWl0O1xuICAgIHRyYWlsaW5nID0gJ3RyYWlsaW5nJyBpbiBvcHRpb25zID8gISFvcHRpb25zLnRyYWlsaW5nIDogdHJhaWxpbmc7XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VGdW5jKHRpbWUpIHtcbiAgICB2YXIgYXJncyA9IGxhc3RBcmdzLFxuICAgICAgICB0aGlzQXJnID0gbGFzdFRoaXM7XG5cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIGxhc3RJbnZva2VUaW1lID0gdGltZTtcbiAgICByZXN1bHQgPSBmdW5jLmFwcGx5KHRoaXNBcmcsIGFyZ3MpO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBsZWFkaW5nRWRnZSh0aW1lKSB7XG4gICAgLy8gUmVzZXQgYW55IGBtYXhXYWl0YCB0aW1lci5cbiAgICBsYXN0SW52b2tlVGltZSA9IHRpbWU7XG4gICAgLy8gU3RhcnQgdGhlIHRpbWVyIGZvciB0aGUgdHJhaWxpbmcgZWRnZS5cbiAgICB0aW1lcklkID0gc2V0VGltZW91dCh0aW1lckV4cGlyZWQsIHdhaXQpO1xuICAgIC8vIEludm9rZSB0aGUgbGVhZGluZyBlZGdlLlxuICAgIHJldHVybiBsZWFkaW5nID8gaW52b2tlRnVuYyh0aW1lKSA6IHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlbWFpbmluZ1dhaXQodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWUsXG4gICAgICAgIHJlc3VsdCA9IHdhaXQgLSB0aW1lU2luY2VMYXN0Q2FsbDtcblxuICAgIHJldHVybiBtYXhpbmcgPyBuYXRpdmVNaW4ocmVzdWx0LCBtYXhXYWl0IC0gdGltZVNpbmNlTGFzdEludm9rZSkgOiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBzaG91bGRJbnZva2UodGltZSkge1xuICAgIHZhciB0aW1lU2luY2VMYXN0Q2FsbCA9IHRpbWUgLSBsYXN0Q2FsbFRpbWUsXG4gICAgICAgIHRpbWVTaW5jZUxhc3RJbnZva2UgPSB0aW1lIC0gbGFzdEludm9rZVRpbWU7XG5cbiAgICAvLyBFaXRoZXIgdGhpcyBpcyB0aGUgZmlyc3QgY2FsbCwgYWN0aXZpdHkgaGFzIHN0b3BwZWQgYW5kIHdlJ3JlIGF0IHRoZVxuICAgIC8vIHRyYWlsaW5nIGVkZ2UsIHRoZSBzeXN0ZW0gdGltZSBoYXMgZ29uZSBiYWNrd2FyZHMgYW5kIHdlJ3JlIHRyZWF0aW5nXG4gICAgLy8gaXQgYXMgdGhlIHRyYWlsaW5nIGVkZ2UsIG9yIHdlJ3ZlIGhpdCB0aGUgYG1heFdhaXRgIGxpbWl0LlxuICAgIHJldHVybiAobGFzdENhbGxUaW1lID09PSB1bmRlZmluZWQgfHwgKHRpbWVTaW5jZUxhc3RDYWxsID49IHdhaXQpIHx8XG4gICAgICAodGltZVNpbmNlTGFzdENhbGwgPCAwKSB8fCAobWF4aW5nICYmIHRpbWVTaW5jZUxhc3RJbnZva2UgPj0gbWF4V2FpdCkpO1xuICB9XG5cbiAgZnVuY3Rpb24gdGltZXJFeHBpcmVkKCkge1xuICAgIHZhciB0aW1lID0gbm93KCk7XG4gICAgaWYgKHNob3VsZEludm9rZSh0aW1lKSkge1xuICAgICAgcmV0dXJuIHRyYWlsaW5nRWRnZSh0aW1lKTtcbiAgICB9XG4gICAgLy8gUmVzdGFydCB0aGUgdGltZXIuXG4gICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCByZW1haW5pbmdXYWl0KHRpbWUpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHRyYWlsaW5nRWRnZSh0aW1lKSB7XG4gICAgdGltZXJJZCA9IHVuZGVmaW5lZDtcblxuICAgIC8vIE9ubHkgaW52b2tlIGlmIHdlIGhhdmUgYGxhc3RBcmdzYCB3aGljaCBtZWFucyBgZnVuY2AgaGFzIGJlZW5cbiAgICAvLyBkZWJvdW5jZWQgYXQgbGVhc3Qgb25jZS5cbiAgICBpZiAodHJhaWxpbmcgJiYgbGFzdEFyZ3MpIHtcbiAgICAgIHJldHVybiBpbnZva2VGdW5jKHRpbWUpO1xuICAgIH1cbiAgICBsYXN0QXJncyA9IGxhc3RUaGlzID0gdW5kZWZpbmVkO1xuICAgIHJldHVybiByZXN1bHQ7XG4gIH1cblxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XG4gICAgaWYgKHRpbWVySWQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgY2xlYXJUaW1lb3V0KHRpbWVySWQpO1xuICAgIH1cbiAgICBsYXN0SW52b2tlVGltZSA9IDA7XG4gICAgbGFzdEFyZ3MgPSBsYXN0Q2FsbFRpbWUgPSBsYXN0VGhpcyA9IHRpbWVySWQgPSB1bmRlZmluZWQ7XG4gIH1cblxuICBmdW5jdGlvbiBmbHVzaCgpIHtcbiAgICByZXR1cm4gdGltZXJJZCA9PT0gdW5kZWZpbmVkID8gcmVzdWx0IDogdHJhaWxpbmdFZGdlKG5vdygpKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlYm91bmNlZCgpIHtcbiAgICB2YXIgdGltZSA9IG5vdygpLFxuICAgICAgICBpc0ludm9raW5nID0gc2hvdWxkSW52b2tlKHRpbWUpO1xuXG4gICAgbGFzdEFyZ3MgPSBhcmd1bWVudHM7XG4gICAgbGFzdFRoaXMgPSB0aGlzO1xuICAgIGxhc3RDYWxsVGltZSA9IHRpbWU7XG5cbiAgICBpZiAoaXNJbnZva2luZykge1xuICAgICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gbGVhZGluZ0VkZ2UobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICAgIGlmIChtYXhpbmcpIHtcbiAgICAgICAgLy8gSGFuZGxlIGludm9jYXRpb25zIGluIGEgdGlnaHQgbG9vcC5cbiAgICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICAgICAgcmV0dXJuIGludm9rZUZ1bmMobGFzdENhbGxUaW1lKTtcbiAgICAgIH1cbiAgICB9XG4gICAgaWYgKHRpbWVySWQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgdGltZXJJZCA9IHNldFRpbWVvdXQodGltZXJFeHBpcmVkLCB3YWl0KTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuICBkZWJvdW5jZWQuY2FuY2VsID0gY2FuY2VsO1xuICBkZWJvdW5jZWQuZmx1c2ggPSBmbHVzaDtcbiAgcmV0dXJuIGRlYm91bmNlZDtcbn1cblxuLyoqXG4gKiBDcmVhdGVzIGEgdGhyb3R0bGVkIGZ1bmN0aW9uIHRoYXQgb25seSBpbnZva2VzIGBmdW5jYCBhdCBtb3N0IG9uY2UgcGVyXG4gKiBldmVyeSBgd2FpdGAgbWlsbGlzZWNvbmRzLiBUaGUgdGhyb3R0bGVkIGZ1bmN0aW9uIGNvbWVzIHdpdGggYSBgY2FuY2VsYFxuICogbWV0aG9kIHRvIGNhbmNlbCBkZWxheWVkIGBmdW5jYCBpbnZvY2F0aW9ucyBhbmQgYSBgZmx1c2hgIG1ldGhvZCB0b1xuICogaW1tZWRpYXRlbHkgaW52b2tlIHRoZW0uIFByb3ZpZGUgYG9wdGlvbnNgIHRvIGluZGljYXRlIHdoZXRoZXIgYGZ1bmNgXG4gKiBzaG91bGQgYmUgaW52b2tlZCBvbiB0aGUgbGVhZGluZyBhbmQvb3IgdHJhaWxpbmcgZWRnZSBvZiB0aGUgYHdhaXRgXG4gKiB0aW1lb3V0LiBUaGUgYGZ1bmNgIGlzIGludm9rZWQgd2l0aCB0aGUgbGFzdCBhcmd1bWVudHMgcHJvdmlkZWQgdG8gdGhlXG4gKiB0aHJvdHRsZWQgZnVuY3Rpb24uIFN1YnNlcXVlbnQgY2FsbHMgdG8gdGhlIHRocm90dGxlZCBmdW5jdGlvbiByZXR1cm4gdGhlXG4gKiByZXN1bHQgb2YgdGhlIGxhc3QgYGZ1bmNgIGludm9jYXRpb24uXG4gKlxuICogKipOb3RlOioqIElmIGBsZWFkaW5nYCBhbmQgYHRyYWlsaW5nYCBvcHRpb25zIGFyZSBgdHJ1ZWAsIGBmdW5jYCBpc1xuICogaW52b2tlZCBvbiB0aGUgdHJhaWxpbmcgZWRnZSBvZiB0aGUgdGltZW91dCBvbmx5IGlmIHRoZSB0aHJvdHRsZWQgZnVuY3Rpb25cbiAqIGlzIGludm9rZWQgbW9yZSB0aGFuIG9uY2UgZHVyaW5nIHRoZSBgd2FpdGAgdGltZW91dC5cbiAqXG4gKiBJZiBgd2FpdGAgaXMgYDBgIGFuZCBgbGVhZGluZ2AgaXMgYGZhbHNlYCwgYGZ1bmNgIGludm9jYXRpb24gaXMgZGVmZXJyZWRcbiAqIHVudGlsIHRvIHRoZSBuZXh0IHRpY2ssIHNpbWlsYXIgdG8gYHNldFRpbWVvdXRgIHdpdGggYSB0aW1lb3V0IG9mIGAwYC5cbiAqXG4gKiBTZWUgW0RhdmlkIENvcmJhY2hvJ3MgYXJ0aWNsZV0oaHR0cHM6Ly9jc3MtdHJpY2tzLmNvbS9kZWJvdW5jaW5nLXRocm90dGxpbmctZXhwbGFpbmVkLWV4YW1wbGVzLylcbiAqIGZvciBkZXRhaWxzIG92ZXIgdGhlIGRpZmZlcmVuY2VzIGJldHdlZW4gYF8udGhyb3R0bGVgIGFuZCBgXy5kZWJvdW5jZWAuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSAwLjEuMFxuICogQGNhdGVnb3J5IEZ1bmN0aW9uXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmdW5jIFRoZSBmdW5jdGlvbiB0byB0aHJvdHRsZS5cbiAqIEBwYXJhbSB7bnVtYmVyfSBbd2FpdD0wXSBUaGUgbnVtYmVyIG9mIG1pbGxpc2Vjb25kcyB0byB0aHJvdHRsZSBpbnZvY2F0aW9ucyB0by5cbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9ucz17fV0gVGhlIG9wdGlvbnMgb2JqZWN0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy5sZWFkaW5nPXRydWVdXG4gKiAgU3BlY2lmeSBpbnZva2luZyBvbiB0aGUgbGVhZGluZyBlZGdlIG9mIHRoZSB0aW1lb3V0LlxuICogQHBhcmFtIHtib29sZWFufSBbb3B0aW9ucy50cmFpbGluZz10cnVlXVxuICogIFNwZWNpZnkgaW52b2tpbmcgb24gdGhlIHRyYWlsaW5nIGVkZ2Ugb2YgdGhlIHRpbWVvdXQuXG4gKiBAcmV0dXJucyB7RnVuY3Rpb259IFJldHVybnMgdGhlIG5ldyB0aHJvdHRsZWQgZnVuY3Rpb24uXG4gKiBAZXhhbXBsZVxuICpcbiAqIC8vIEF2b2lkIGV4Y2Vzc2l2ZWx5IHVwZGF0aW5nIHRoZSBwb3NpdGlvbiB3aGlsZSBzY3JvbGxpbmcuXG4gKiBqUXVlcnkod2luZG93KS5vbignc2Nyb2xsJywgXy50aHJvdHRsZSh1cGRhdGVQb3NpdGlvbiwgMTAwKSk7XG4gKlxuICogLy8gSW52b2tlIGByZW5ld1Rva2VuYCB3aGVuIHRoZSBjbGljayBldmVudCBpcyBmaXJlZCwgYnV0IG5vdCBtb3JlIHRoYW4gb25jZSBldmVyeSA1IG1pbnV0ZXMuXG4gKiB2YXIgdGhyb3R0bGVkID0gXy50aHJvdHRsZShyZW5ld1Rva2VuLCAzMDAwMDAsIHsgJ3RyYWlsaW5nJzogZmFsc2UgfSk7XG4gKiBqUXVlcnkoZWxlbWVudCkub24oJ2NsaWNrJywgdGhyb3R0bGVkKTtcbiAqXG4gKiAvLyBDYW5jZWwgdGhlIHRyYWlsaW5nIHRocm90dGxlZCBpbnZvY2F0aW9uLlxuICogalF1ZXJ5KHdpbmRvdykub24oJ3BvcHN0YXRlJywgdGhyb3R0bGVkLmNhbmNlbCk7XG4gKi9cbmZ1bmN0aW9uIHRocm90dGxlKGZ1bmMsIHdhaXQsIG9wdGlvbnMpIHtcbiAgdmFyIGxlYWRpbmcgPSB0cnVlLFxuICAgICAgdHJhaWxpbmcgPSB0cnVlO1xuXG4gIGlmICh0eXBlb2YgZnVuYyAhPSAnZnVuY3Rpb24nKSB7XG4gICAgdGhyb3cgbmV3IFR5cGVFcnJvcihGVU5DX0VSUk9SX1RFWFQpO1xuICB9XG4gIGlmIChpc09iamVjdChvcHRpb25zKSkge1xuICAgIGxlYWRpbmcgPSAnbGVhZGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy5sZWFkaW5nIDogbGVhZGluZztcbiAgICB0cmFpbGluZyA9ICd0cmFpbGluZycgaW4gb3B0aW9ucyA/ICEhb3B0aW9ucy50cmFpbGluZyA6IHRyYWlsaW5nO1xuICB9XG4gIHJldHVybiBkZWJvdW5jZShmdW5jLCB3YWl0LCB7XG4gICAgJ2xlYWRpbmcnOiBsZWFkaW5nLFxuICAgICdtYXhXYWl0Jzogd2FpdCxcbiAgICAndHJhaWxpbmcnOiB0cmFpbGluZ1xuICB9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgaWYgYHZhbHVlYCBpcyB0aGVcbiAqIFtsYW5ndWFnZSB0eXBlXShodHRwOi8vd3d3LmVjbWEtaW50ZXJuYXRpb25hbC5vcmcvZWNtYS0yNjIvNy4wLyNzZWMtZWNtYXNjcmlwdC1sYW5ndWFnZS10eXBlcylcbiAqIG9mIGBPYmplY3RgLiAoZS5nLiBhcnJheXMsIGZ1bmN0aW9ucywgb2JqZWN0cywgcmVnZXhlcywgYG5ldyBOdW1iZXIoMClgLCBhbmQgYG5ldyBTdHJpbmcoJycpYClcbiAqXG4gKiBAc3RhdGljXG4gKiBAbWVtYmVyT2YgX1xuICogQHNpbmNlIDAuMS4wXG4gKiBAY2F0ZWdvcnkgTGFuZ1xuICogQHBhcmFtIHsqfSB2YWx1ZSBUaGUgdmFsdWUgdG8gY2hlY2suXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gUmV0dXJucyBgdHJ1ZWAgaWYgYHZhbHVlYCBpcyBhbiBvYmplY3QsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdCh7fSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdChbMSwgMiwgM10pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3QoXy5ub29wKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzT2JqZWN0KG51bGwpO1xuICogLy8gPT4gZmFsc2VcbiAqL1xuZnVuY3Rpb24gaXNPYmplY3QodmFsdWUpIHtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsdWU7XG4gIHJldHVybiAhIXZhbHVlICYmICh0eXBlID09ICdvYmplY3QnIHx8IHR5cGUgPT0gJ2Z1bmN0aW9uJyk7XG59XG5cbi8qKlxuICogQ2hlY2tzIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UuIEEgdmFsdWUgaXMgb2JqZWN0LWxpa2UgaWYgaXQncyBub3QgYG51bGxgXG4gKiBhbmQgaGFzIGEgYHR5cGVvZmAgcmVzdWx0IG9mIFwib2JqZWN0XCIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIGNoZWNrLlxuICogQHJldHVybnMge2Jvb2xlYW59IFJldHVybnMgYHRydWVgIGlmIGB2YWx1ZWAgaXMgb2JqZWN0LWxpa2UsIGVsc2UgYGZhbHNlYC5cbiAqIEBleGFtcGxlXG4gKlxuICogXy5pc09iamVjdExpa2Uoe30pO1xuICogLy8gPT4gdHJ1ZVxuICpcbiAqIF8uaXNPYmplY3RMaWtlKFsxLCAyLCAzXSk7XG4gKiAvLyA9PiB0cnVlXG4gKlxuICogXy5pc09iamVjdExpa2UoXy5ub29wKTtcbiAqIC8vID0+IGZhbHNlXG4gKlxuICogXy5pc09iamVjdExpa2UobnVsbCk7XG4gKiAvLyA9PiBmYWxzZVxuICovXG5mdW5jdGlvbiBpc09iamVjdExpa2UodmFsdWUpIHtcbiAgcmV0dXJuICEhdmFsdWUgJiYgdHlwZW9mIHZhbHVlID09ICdvYmplY3QnO1xufVxuXG4vKipcbiAqIENoZWNrcyBpZiBgdmFsdWVgIGlzIGNsYXNzaWZpZWQgYXMgYSBgU3ltYm9sYCBwcmltaXRpdmUgb3Igb2JqZWN0LlxuICpcbiAqIEBzdGF0aWNcbiAqIEBtZW1iZXJPZiBfXG4gKiBAc2luY2UgNC4wLjBcbiAqIEBjYXRlZ29yeSBMYW5nXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBjaGVjay5cbiAqIEByZXR1cm5zIHtib29sZWFufSBSZXR1cm5zIGB0cnVlYCBpZiBgdmFsdWVgIGlzIGEgc3ltYm9sLCBlbHNlIGBmYWxzZWAuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8uaXNTeW1ib2woU3ltYm9sLml0ZXJhdG9yKTtcbiAqIC8vID0+IHRydWVcbiAqXG4gKiBfLmlzU3ltYm9sKCdhYmMnKTtcbiAqIC8vID0+IGZhbHNlXG4gKi9cbmZ1bmN0aW9uIGlzU3ltYm9sKHZhbHVlKSB7XG4gIHJldHVybiB0eXBlb2YgdmFsdWUgPT0gJ3N5bWJvbCcgfHxcbiAgICAoaXNPYmplY3RMaWtlKHZhbHVlKSAmJiBvYmplY3RUb1N0cmluZy5jYWxsKHZhbHVlKSA9PSBzeW1ib2xUYWcpO1xufVxuXG4vKipcbiAqIENvbnZlcnRzIGB2YWx1ZWAgdG8gYSBudW1iZXIuXG4gKlxuICogQHN0YXRpY1xuICogQG1lbWJlck9mIF9cbiAqIEBzaW5jZSA0LjAuMFxuICogQGNhdGVnb3J5IExhbmdcbiAqIEBwYXJhbSB7Kn0gdmFsdWUgVGhlIHZhbHVlIHRvIHByb2Nlc3MuXG4gKiBAcmV0dXJucyB7bnVtYmVyfSBSZXR1cm5zIHRoZSBudW1iZXIuXG4gKiBAZXhhbXBsZVxuICpcbiAqIF8udG9OdW1iZXIoMy4yKTtcbiAqIC8vID0+IDMuMlxuICpcbiAqIF8udG9OdW1iZXIoTnVtYmVyLk1JTl9WQUxVRSk7XG4gKiAvLyA9PiA1ZS0zMjRcbiAqXG4gKiBfLnRvTnVtYmVyKEluZmluaXR5KTtcbiAqIC8vID0+IEluZmluaXR5XG4gKlxuICogXy50b051bWJlcignMy4yJyk7XG4gKiAvLyA9PiAzLjJcbiAqL1xuZnVuY3Rpb24gdG9OdW1iZXIodmFsdWUpIHtcbiAgaWYgKHR5cGVvZiB2YWx1ZSA9PSAnbnVtYmVyJykge1xuICAgIHJldHVybiB2YWx1ZTtcbiAgfVxuICBpZiAoaXNTeW1ib2wodmFsdWUpKSB7XG4gICAgcmV0dXJuIE5BTjtcbiAgfVxuICBpZiAoaXNPYmplY3QodmFsdWUpKSB7XG4gICAgdmFyIG90aGVyID0gdHlwZW9mIHZhbHVlLnZhbHVlT2YgPT0gJ2Z1bmN0aW9uJyA/IHZhbHVlLnZhbHVlT2YoKSA6IHZhbHVlO1xuICAgIHZhbHVlID0gaXNPYmplY3Qob3RoZXIpID8gKG90aGVyICsgJycpIDogb3RoZXI7XG4gIH1cbiAgaWYgKHR5cGVvZiB2YWx1ZSAhPSAnc3RyaW5nJykge1xuICAgIHJldHVybiB2YWx1ZSA9PT0gMCA/IHZhbHVlIDogK3ZhbHVlO1xuICB9XG4gIHZhbHVlID0gdmFsdWUucmVwbGFjZShyZVRyaW0sICcnKTtcbiAgdmFyIGlzQmluYXJ5ID0gcmVJc0JpbmFyeS50ZXN0KHZhbHVlKTtcbiAgcmV0dXJuIChpc0JpbmFyeSB8fCByZUlzT2N0YWwudGVzdCh2YWx1ZSkpXG4gICAgPyBmcmVlUGFyc2VJbnQodmFsdWUuc2xpY2UoMiksIGlzQmluYXJ5ID8gMiA6IDgpXG4gICAgOiAocmVJc0JhZEhleC50ZXN0KHZhbHVlKSA/IE5BTiA6ICt2YWx1ZSk7XG59XG5cbm1vZHVsZS5leHBvcnRzID0gdGhyb3R0bGU7XG4iLCJ2YXIgZztcblxuLy8gVGhpcyB3b3JrcyBpbiBub24tc3RyaWN0IG1vZGVcbmcgPSAoZnVuY3Rpb24oKSB7XG5cdHJldHVybiB0aGlzO1xufSkoKTtcblxudHJ5IHtcblx0Ly8gVGhpcyB3b3JrcyBpZiBldmFsIGlzIGFsbG93ZWQgKHNlZSBDU1ApXG5cdGcgPSBnIHx8IG5ldyBGdW5jdGlvbihcInJldHVybiB0aGlzXCIpKCk7XG59IGNhdGNoIChlKSB7XG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXG5cdGlmICh0eXBlb2Ygd2luZG93ID09PSBcIm9iamVjdFwiKSBnID0gd2luZG93O1xufVxuXG4vLyBnIGNhbiBzdGlsbCBiZSB1bmRlZmluZWQsIGJ1dCBub3RoaW5nIHRvIGRvIGFib3V0IGl0Li4uXG4vLyBXZSByZXR1cm4gdW5kZWZpbmVkLCBpbnN0ZWFkIG9mIG5vdGhpbmcgaGVyZSwgc28gaXQnc1xuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGc7XG4iLCIvLyByYW5kb21Db2xvciBieSBEYXZpZCBNZXJmaWVsZCB1bmRlciB0aGUgQ0MwIGxpY2Vuc2Vcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9kYXZpZG1lcmZpZWxkL3JhbmRvbUNvbG9yL1xuXG47KGZ1bmN0aW9uKHJvb3QsIGZhY3RvcnkpIHtcblxuICAvLyBTdXBwb3J0IENvbW1vbkpTXG4gIGlmICh0eXBlb2YgZXhwb3J0cyA9PT0gJ29iamVjdCcpIHtcbiAgICB2YXIgcmFuZG9tQ29sb3IgPSBmYWN0b3J5KCk7XG5cbiAgICAvLyBTdXBwb3J0IE5vZGVKUyAmIENvbXBvbmVudCwgd2hpY2ggYWxsb3cgbW9kdWxlLmV4cG9ydHMgdG8gYmUgYSBmdW5jdGlvblxuICAgIGlmICh0eXBlb2YgbW9kdWxlID09PSAnb2JqZWN0JyAmJiBtb2R1bGUgJiYgbW9kdWxlLmV4cG9ydHMpIHtcbiAgICAgIGV4cG9ydHMgPSBtb2R1bGUuZXhwb3J0cyA9IHJhbmRvbUNvbG9yO1xuICAgIH1cblxuICAgIC8vIFN1cHBvcnQgQ29tbW9uSlMgMS4xLjEgc3BlY1xuICAgIGV4cG9ydHMucmFuZG9tQ29sb3IgPSByYW5kb21Db2xvcjtcblxuICAvLyBTdXBwb3J0IEFNRFxuICB9IGVsc2UgaWYgKHR5cGVvZiBkZWZpbmUgPT09ICdmdW5jdGlvbicgJiYgZGVmaW5lLmFtZCkge1xuICAgIGRlZmluZShbXSwgZmFjdG9yeSk7XG5cbiAgLy8gU3VwcG9ydCB2YW5pbGxhIHNjcmlwdCBsb2FkaW5nXG4gIH0gZWxzZSB7XG4gICAgcm9vdC5yYW5kb21Db2xvciA9IGZhY3RvcnkoKTtcbiAgfVxuXG59KHRoaXMsIGZ1bmN0aW9uKCkge1xuXG4gIC8vIFNlZWQgdG8gZ2V0IHJlcGVhdGFibGUgY29sb3JzXG4gIHZhciBzZWVkID0gbnVsbDtcblxuICAvLyBTaGFyZWQgY29sb3IgZGljdGlvbmFyeVxuICB2YXIgY29sb3JEaWN0aW9uYXJ5ID0ge307XG5cbiAgLy8gUG9wdWxhdGUgdGhlIGNvbG9yIGRpY3Rpb25hcnlcbiAgbG9hZENvbG9yQm91bmRzKCk7XG5cbiAgLy8gY2hlY2sgaWYgYSByYW5nZSBpcyB0YWtlblxuICB2YXIgY29sb3JSYW5nZXMgPSBbXTtcblxuICB2YXIgcmFuZG9tQ29sb3IgPSBmdW5jdGlvbiAob3B0aW9ucykge1xuXG4gICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG5cbiAgICAvLyBDaGVjayBpZiB0aGVyZSBpcyBhIHNlZWQgYW5kIGVuc3VyZSBpdCdzIGFuXG4gICAgLy8gaW50ZWdlci4gT3RoZXJ3aXNlLCByZXNldCB0aGUgc2VlZCB2YWx1ZS5cbiAgICBpZiAob3B0aW9ucy5zZWVkICE9PSB1bmRlZmluZWQgJiYgb3B0aW9ucy5zZWVkICE9PSBudWxsICYmIG9wdGlvbnMuc2VlZCA9PT0gcGFyc2VJbnQob3B0aW9ucy5zZWVkLCAxMCkpIHtcbiAgICAgIHNlZWQgPSBvcHRpb25zLnNlZWQ7XG5cbiAgICAvLyBBIHN0cmluZyB3YXMgcGFzc2VkIGFzIGEgc2VlZFxuICAgIH0gZWxzZSBpZiAodHlwZW9mIG9wdGlvbnMuc2VlZCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHNlZWQgPSBzdHJpbmdUb0ludGVnZXIob3B0aW9ucy5zZWVkKTtcblxuICAgIC8vIFNvbWV0aGluZyB3YXMgcGFzc2VkIGFzIGEgc2VlZCBidXQgaXQgd2Fzbid0IGFuIGludGVnZXIgb3Igc3RyaW5nXG4gICAgfSBlbHNlIGlmIChvcHRpb25zLnNlZWQgIT09IHVuZGVmaW5lZCAmJiBvcHRpb25zLnNlZWQgIT09IG51bGwpIHtcbiAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoJ1RoZSBzZWVkIHZhbHVlIG11c3QgYmUgYW4gaW50ZWdlciBvciBzdHJpbmcnKTtcblxuICAgIC8vIE5vIHNlZWQsIHJlc2V0IHRoZSB2YWx1ZSBvdXRzaWRlLlxuICAgIH0gZWxzZSB7XG4gICAgICBzZWVkID0gbnVsbDtcbiAgICB9XG5cbiAgICB2YXIgSCxTLEI7XG5cbiAgICAvLyBDaGVjayBpZiB3ZSBuZWVkIHRvIGdlbmVyYXRlIG11bHRpcGxlIGNvbG9yc1xuICAgIGlmIChvcHRpb25zLmNvdW50ICE9PSBudWxsICYmIG9wdGlvbnMuY291bnQgIT09IHVuZGVmaW5lZCkge1xuXG4gICAgICB2YXIgdG90YWxDb2xvcnMgPSBvcHRpb25zLmNvdW50LFxuICAgICAgICAgIGNvbG9ycyA9IFtdO1xuICAgICAgLy8gVmFsdWUgZmFsc2UgYXQgaW5kZXggaSBtZWFucyB0aGUgcmFuZ2UgaSBpcyBub3QgdGFrZW4geWV0LlxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvcHRpb25zLmNvdW50OyBpKyspIHtcbiAgICAgICAgY29sb3JSYW5nZXMucHVzaChmYWxzZSlcbiAgICAgICAgfVxuICAgICAgb3B0aW9ucy5jb3VudCA9IG51bGw7XG5cbiAgICAgIHdoaWxlICh0b3RhbENvbG9ycyA+IGNvbG9ycy5sZW5ndGgpIHtcblxuICAgICAgICAvLyBTaW5jZSB3ZSdyZSBnZW5lcmF0aW5nIG11bHRpcGxlIGNvbG9ycyxcbiAgICAgICAgLy8gaW5jcmVtZW1lbnQgdGhlIHNlZWQuIE90aGVyd2lzZSB3ZSdkIGp1c3RcbiAgICAgICAgLy8gZ2VuZXJhdGUgdGhlIHNhbWUgY29sb3IgZWFjaCB0aW1lLi4uXG4gICAgICAgIGlmIChzZWVkICYmIG9wdGlvbnMuc2VlZCkgb3B0aW9ucy5zZWVkICs9IDE7XG5cbiAgICAgICAgY29sb3JzLnB1c2gocmFuZG9tQ29sb3Iob3B0aW9ucykpO1xuICAgICAgfVxuXG4gICAgICBvcHRpb25zLmNvdW50ID0gdG90YWxDb2xvcnM7XG5cbiAgICAgIHJldHVybiBjb2xvcnM7XG4gICAgfVxuXG4gICAgLy8gRmlyc3Qgd2UgcGljayBhIGh1ZSAoSClcbiAgICBIID0gcGlja0h1ZShvcHRpb25zKTtcblxuICAgIC8vIFRoZW4gdXNlIEggdG8gZGV0ZXJtaW5lIHNhdHVyYXRpb24gKFMpXG4gICAgUyA9IHBpY2tTYXR1cmF0aW9uKEgsIG9wdGlvbnMpO1xuXG4gICAgLy8gVGhlbiB1c2UgUyBhbmQgSCB0byBkZXRlcm1pbmUgYnJpZ2h0bmVzcyAoQikuXG4gICAgQiA9IHBpY2tCcmlnaHRuZXNzKEgsIFMsIG9wdGlvbnMpO1xuXG4gICAgLy8gVGhlbiB3ZSByZXR1cm4gdGhlIEhTQiBjb2xvciBpbiB0aGUgZGVzaXJlZCBmb3JtYXRcbiAgICByZXR1cm4gc2V0Rm9ybWF0KFtILFMsQl0sIG9wdGlvbnMpO1xuICB9O1xuXG4gIGZ1bmN0aW9uIHBpY2tIdWUob3B0aW9ucykge1xuICAgIGlmIChjb2xvclJhbmdlcy5sZW5ndGggPiAwKSB7XG4gICAgICB2YXIgaHVlUmFuZ2UgPSBnZXRSZWFsSHVlUmFuZ2Uob3B0aW9ucy5odWUpXG5cbiAgICAgIHZhciBodWUgPSByYW5kb21XaXRoaW4oaHVlUmFuZ2UpXG5cbiAgICAgIC8vRWFjaCBvZiBjb2xvclJhbmdlcy5sZW5ndGggcmFuZ2VzIGhhcyBhIGxlbmd0aCBlcXVhbCBhcHByb3hpbWF0ZWxseSBvbmUgc3RlcFxuICAgICAgdmFyIHN0ZXAgPSAoaHVlUmFuZ2VbMV0gLSBodWVSYW5nZVswXSkgLyBjb2xvclJhbmdlcy5sZW5ndGhcblxuICAgICAgdmFyIGogPSBwYXJzZUludCgoaHVlIC0gaHVlUmFuZ2VbMF0pIC8gc3RlcClcblxuICAgICAgLy9DaGVjayBpZiB0aGUgcmFuZ2UgaiBpcyB0YWtlblxuICAgICAgaWYgKGNvbG9yUmFuZ2VzW2pdID09PSB0cnVlKSB7XG4gICAgICAgIGogPSAoaiArIDIpICUgY29sb3JSYW5nZXMubGVuZ3RoXG4gICAgICB9XG4gICAgICBlbHNlIHtcbiAgICAgICAgY29sb3JSYW5nZXNbal0gPSB0cnVlXG4gICAgICAgICAgIH1cblxuICAgICAgdmFyIG1pbiA9IChodWVSYW5nZVswXSArIGogKiBzdGVwKSAlIDM1OSxcbiAgICAgICAgICBtYXggPSAoaHVlUmFuZ2VbMF0gKyAoaiArIDEpICogc3RlcCkgJSAzNTk7XG5cbiAgICAgIGh1ZVJhbmdlID0gW21pbiwgbWF4XVxuXG4gICAgICBodWUgPSByYW5kb21XaXRoaW4oaHVlUmFuZ2UpXG5cbiAgICAgIGlmIChodWUgPCAwKSB7aHVlID0gMzYwICsgaHVlO31cbiAgICAgIHJldHVybiBodWVcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgaHVlUmFuZ2UgPSBnZXRIdWVSYW5nZShvcHRpb25zLmh1ZSlcblxuICAgICAgaHVlID0gcmFuZG9tV2l0aGluKGh1ZVJhbmdlKTtcbiAgICAgIC8vIEluc3RlYWQgb2Ygc3RvcmluZyByZWQgYXMgdHdvIHNlcGVyYXRlIHJhbmdlcyxcbiAgICAgIC8vIHdlIGdyb3VwIHRoZW0sIHVzaW5nIG5lZ2F0aXZlIG51bWJlcnNcbiAgICAgIGlmIChodWUgPCAwKSB7XG4gICAgICAgIGh1ZSA9IDM2MCArIGh1ZTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGh1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwaWNrU2F0dXJhdGlvbiAoaHVlLCBvcHRpb25zKSB7XG5cbiAgICBpZiAob3B0aW9ucy5odWUgPT09ICdtb25vY2hyb21lJykge1xuICAgICAgcmV0dXJuIDA7XG4gICAgfVxuXG4gICAgaWYgKG9wdGlvbnMubHVtaW5vc2l0eSA9PT0gJ3JhbmRvbScpIHtcbiAgICAgIHJldHVybiByYW5kb21XaXRoaW4oWzAsMTAwXSk7XG4gICAgfVxuXG4gICAgdmFyIHNhdHVyYXRpb25SYW5nZSA9IGdldFNhdHVyYXRpb25SYW5nZShodWUpO1xuXG4gICAgdmFyIHNNaW4gPSBzYXR1cmF0aW9uUmFuZ2VbMF0sXG4gICAgICAgIHNNYXggPSBzYXR1cmF0aW9uUmFuZ2VbMV07XG5cbiAgICBzd2l0Y2ggKG9wdGlvbnMubHVtaW5vc2l0eSkge1xuXG4gICAgICBjYXNlICdicmlnaHQnOlxuICAgICAgICBzTWluID0gNTU7XG4gICAgICAgIGJyZWFrO1xuXG4gICAgICBjYXNlICdkYXJrJzpcbiAgICAgICAgc01pbiA9IHNNYXggLSAxMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgc01heCA9IDU1O1xuICAgICAgICBicmVhaztcbiAgIH1cblxuICAgIHJldHVybiByYW5kb21XaXRoaW4oW3NNaW4sIHNNYXhdKTtcblxuICB9XG5cbiAgZnVuY3Rpb24gcGlja0JyaWdodG5lc3MgKEgsIFMsIG9wdGlvbnMpIHtcblxuICAgIHZhciBiTWluID0gZ2V0TWluaW11bUJyaWdodG5lc3MoSCwgUyksXG4gICAgICAgIGJNYXggPSAxMDA7XG5cbiAgICBzd2l0Y2ggKG9wdGlvbnMubHVtaW5vc2l0eSkge1xuXG4gICAgICBjYXNlICdkYXJrJzpcbiAgICAgICAgYk1heCA9IGJNaW4gKyAyMDtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ2xpZ2h0JzpcbiAgICAgICAgYk1pbiA9IChiTWF4ICsgYk1pbikvMjtcbiAgICAgICAgYnJlYWs7XG5cbiAgICAgIGNhc2UgJ3JhbmRvbSc6XG4gICAgICAgIGJNaW4gPSAwO1xuICAgICAgICBiTWF4ID0gMTAwO1xuICAgICAgICBicmVhaztcbiAgICB9XG5cbiAgICByZXR1cm4gcmFuZG9tV2l0aGluKFtiTWluLCBiTWF4XSk7XG4gIH1cblxuICBmdW5jdGlvbiBzZXRGb3JtYXQgKGhzdiwgb3B0aW9ucykge1xuXG4gICAgc3dpdGNoIChvcHRpb25zLmZvcm1hdCkge1xuXG4gICAgICBjYXNlICdoc3ZBcnJheSc6XG4gICAgICAgIHJldHVybiBoc3Y7XG5cbiAgICAgIGNhc2UgJ2hzbEFycmF5JzpcbiAgICAgICAgcmV0dXJuIEhTVnRvSFNMKGhzdik7XG5cbiAgICAgIGNhc2UgJ2hzbCc6XG4gICAgICAgIHZhciBoc2wgPSBIU1Z0b0hTTChoc3YpO1xuICAgICAgICByZXR1cm4gJ2hzbCgnK2hzbFswXSsnLCAnK2hzbFsxXSsnJSwgJytoc2xbMl0rJyUpJztcblxuICAgICAgY2FzZSAnaHNsYSc6XG4gICAgICAgIHZhciBoc2xDb2xvciA9IEhTVnRvSFNMKGhzdik7XG4gICAgICAgIHZhciBhbHBoYSA9IG9wdGlvbnMuYWxwaGEgfHwgTWF0aC5yYW5kb20oKTtcbiAgICAgICAgcmV0dXJuICdoc2xhKCcraHNsQ29sb3JbMF0rJywgJytoc2xDb2xvclsxXSsnJSwgJytoc2xDb2xvclsyXSsnJSwgJyArIGFscGhhICsgJyknO1xuXG4gICAgICBjYXNlICdyZ2JBcnJheSc6XG4gICAgICAgIHJldHVybiBIU1Z0b1JHQihoc3YpO1xuXG4gICAgICBjYXNlICdyZ2InOlxuICAgICAgICB2YXIgcmdiID0gSFNWdG9SR0IoaHN2KTtcbiAgICAgICAgcmV0dXJuICdyZ2IoJyArIHJnYi5qb2luKCcsICcpICsgJyknO1xuXG4gICAgICBjYXNlICdyZ2JhJzpcbiAgICAgICAgdmFyIHJnYkNvbG9yID0gSFNWdG9SR0IoaHN2KTtcbiAgICAgICAgdmFyIGFscGhhID0gb3B0aW9ucy5hbHBoYSB8fCBNYXRoLnJhbmRvbSgpO1xuICAgICAgICByZXR1cm4gJ3JnYmEoJyArIHJnYkNvbG9yLmpvaW4oJywgJykgKyAnLCAnICsgYWxwaGEgKyAnKSc7XG5cbiAgICAgIGRlZmF1bHQ6XG4gICAgICAgIHJldHVybiBIU1Z0b0hleChoc3YpO1xuICAgIH1cblxuICB9XG5cbiAgZnVuY3Rpb24gZ2V0TWluaW11bUJyaWdodG5lc3MoSCwgUykge1xuXG4gICAgdmFyIGxvd2VyQm91bmRzID0gZ2V0Q29sb3JJbmZvKEgpLmxvd2VyQm91bmRzO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsb3dlckJvdW5kcy5sZW5ndGggLSAxOyBpKyspIHtcblxuICAgICAgdmFyIHMxID0gbG93ZXJCb3VuZHNbaV1bMF0sXG4gICAgICAgICAgdjEgPSBsb3dlckJvdW5kc1tpXVsxXTtcblxuICAgICAgdmFyIHMyID0gbG93ZXJCb3VuZHNbaSsxXVswXSxcbiAgICAgICAgICB2MiA9IGxvd2VyQm91bmRzW2krMV1bMV07XG5cbiAgICAgIGlmIChTID49IHMxICYmIFMgPD0gczIpIHtcblxuICAgICAgICAgdmFyIG0gPSAodjIgLSB2MSkvKHMyIC0gczEpLFxuICAgICAgICAgICAgIGIgPSB2MSAtIG0qczE7XG5cbiAgICAgICAgIHJldHVybiBtKlMgKyBiO1xuICAgICAgfVxuXG4gICAgfVxuXG4gICAgcmV0dXJuIDA7XG4gIH1cblxuICBmdW5jdGlvbiBnZXRIdWVSYW5nZSAoY29sb3JJbnB1dCkge1xuXG4gICAgaWYgKHR5cGVvZiBwYXJzZUludChjb2xvcklucHV0KSA9PT0gJ251bWJlcicpIHtcblxuICAgICAgdmFyIG51bWJlciA9IHBhcnNlSW50KGNvbG9ySW5wdXQpO1xuXG4gICAgICBpZiAobnVtYmVyIDwgMzYwICYmIG51bWJlciA+IDApIHtcbiAgICAgICAgcmV0dXJuIFtudW1iZXIsIG51bWJlcl07XG4gICAgICB9XG5cbiAgICB9XG5cbiAgICBpZiAodHlwZW9mIGNvbG9ySW5wdXQgPT09ICdzdHJpbmcnKSB7XG5cbiAgICAgIGlmIChjb2xvckRpY3Rpb25hcnlbY29sb3JJbnB1dF0pIHtcbiAgICAgICAgdmFyIGNvbG9yID0gY29sb3JEaWN0aW9uYXJ5W2NvbG9ySW5wdXRdO1xuICAgICAgICBpZiAoY29sb3IuaHVlUmFuZ2UpIHtyZXR1cm4gY29sb3IuaHVlUmFuZ2U7fVxuICAgICAgfSBlbHNlIGlmIChjb2xvcklucHV0Lm1hdGNoKC9eIz8oWzAtOUEtRl17M318WzAtOUEtRl17Nn0pJC9pKSkge1xuICAgICAgICB2YXIgaHVlID0gSGV4VG9IU0IoY29sb3JJbnB1dClbMF07XG4gICAgICAgIHJldHVybiBbIGh1ZSwgaHVlIF07XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIFswLDM2MF07XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNhdHVyYXRpb25SYW5nZSAoaHVlKSB7XG4gICAgcmV0dXJuIGdldENvbG9ySW5mbyhodWUpLnNhdHVyYXRpb25SYW5nZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldENvbG9ySW5mbyAoaHVlKSB7XG5cbiAgICAvLyBNYXBzIHJlZCBjb2xvcnMgdG8gbWFrZSBwaWNraW5nIGh1ZSBlYXNpZXJcbiAgICBpZiAoaHVlID49IDMzNCAmJiBodWUgPD0gMzYwKSB7XG4gICAgICBodWUtPSAzNjA7XG4gICAgfVxuXG4gICAgZm9yICh2YXIgY29sb3JOYW1lIGluIGNvbG9yRGljdGlvbmFyeSkge1xuICAgICAgIHZhciBjb2xvciA9IGNvbG9yRGljdGlvbmFyeVtjb2xvck5hbWVdO1xuICAgICAgIGlmIChjb2xvci5odWVSYW5nZSAmJlxuICAgICAgICAgICBodWUgPj0gY29sb3IuaHVlUmFuZ2VbMF0gJiZcbiAgICAgICAgICAgaHVlIDw9IGNvbG9yLmh1ZVJhbmdlWzFdKSB7XG4gICAgICAgICAgcmV0dXJuIGNvbG9yRGljdGlvbmFyeVtjb2xvck5hbWVdO1xuICAgICAgIH1cbiAgICB9IHJldHVybiAnQ29sb3Igbm90IGZvdW5kJztcbiAgfVxuXG4gIGZ1bmN0aW9uIHJhbmRvbVdpdGhpbiAocmFuZ2UpIHtcbiAgICBpZiAoc2VlZCA9PT0gbnVsbCkge1xuICAgICAgLy9nZW5lcmF0ZSByYW5kb20gZXZlbmx5IGRlc3RpbmN0IG51bWJlciBmcm9tIDogaHR0cHM6Ly9tYXJ0aW4uYW5rZXJsLmNvbS8yMDA5LzEyLzA5L2hvdy10by1jcmVhdGUtcmFuZG9tLWNvbG9ycy1wcm9ncmFtbWF0aWNhbGx5L1xuICAgICAgdmFyIGdvbGRlbl9yYXRpbyA9IDAuNjE4MDMzOTg4NzQ5ODk1XG4gICAgICB2YXIgcj1NYXRoLnJhbmRvbSgpXG4gICAgICByICs9IGdvbGRlbl9yYXRpb1xuICAgICAgciAlPSAxXG4gICAgICByZXR1cm4gTWF0aC5mbG9vcihyYW5nZVswXSArIHIqKHJhbmdlWzFdICsgMSAtIHJhbmdlWzBdKSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vU2VlZGVkIHJhbmRvbSBhbGdvcml0aG0gZnJvbSBodHRwOi8vaW5kaWVnYW1yLmNvbS9nZW5lcmF0ZS1yZXBlYXRhYmxlLXJhbmRvbS1udW1iZXJzLWluLWpzL1xuICAgICAgdmFyIG1heCA9IHJhbmdlWzFdIHx8IDE7XG4gICAgICB2YXIgbWluID0gcmFuZ2VbMF0gfHwgMDtcbiAgICAgIHNlZWQgPSAoc2VlZCAqIDkzMDEgKyA0OTI5NykgJSAyMzMyODA7XG4gICAgICB2YXIgcm5kID0gc2VlZCAvIDIzMzI4MC4wO1xuICAgICAgcmV0dXJuIE1hdGguZmxvb3IobWluICsgcm5kICogKG1heCAtIG1pbikpO1xufVxuICB9XG5cbiAgZnVuY3Rpb24gSFNWdG9IZXggKGhzdil7XG5cbiAgICB2YXIgcmdiID0gSFNWdG9SR0IoaHN2KTtcblxuICAgIGZ1bmN0aW9uIGNvbXBvbmVudFRvSGV4KGMpIHtcbiAgICAgICAgdmFyIGhleCA9IGMudG9TdHJpbmcoMTYpO1xuICAgICAgICByZXR1cm4gaGV4Lmxlbmd0aCA9PSAxID8gJzAnICsgaGV4IDogaGV4O1xuICAgIH1cblxuICAgIHZhciBoZXggPSAnIycgKyBjb21wb25lbnRUb0hleChyZ2JbMF0pICsgY29tcG9uZW50VG9IZXgocmdiWzFdKSArIGNvbXBvbmVudFRvSGV4KHJnYlsyXSk7XG5cbiAgICByZXR1cm4gaGV4O1xuXG4gIH1cblxuICBmdW5jdGlvbiBkZWZpbmVDb2xvciAobmFtZSwgaHVlUmFuZ2UsIGxvd2VyQm91bmRzKSB7XG5cbiAgICB2YXIgc01pbiA9IGxvd2VyQm91bmRzWzBdWzBdLFxuICAgICAgICBzTWF4ID0gbG93ZXJCb3VuZHNbbG93ZXJCb3VuZHMubGVuZ3RoIC0gMV1bMF0sXG5cbiAgICAgICAgYk1pbiA9IGxvd2VyQm91bmRzW2xvd2VyQm91bmRzLmxlbmd0aCAtIDFdWzFdLFxuICAgICAgICBiTWF4ID0gbG93ZXJCb3VuZHNbMF1bMV07XG5cbiAgICBjb2xvckRpY3Rpb25hcnlbbmFtZV0gPSB7XG4gICAgICBodWVSYW5nZTogaHVlUmFuZ2UsXG4gICAgICBsb3dlckJvdW5kczogbG93ZXJCb3VuZHMsXG4gICAgICBzYXR1cmF0aW9uUmFuZ2U6IFtzTWluLCBzTWF4XSxcbiAgICAgIGJyaWdodG5lc3NSYW5nZTogW2JNaW4sIGJNYXhdXG4gICAgfTtcblxuICB9XG5cbiAgZnVuY3Rpb24gbG9hZENvbG9yQm91bmRzICgpIHtcblxuICAgIGRlZmluZUNvbG9yKFxuICAgICAgJ21vbm9jaHJvbWUnLFxuICAgICAgbnVsbCxcbiAgICAgIFtbMCwwXSxbMTAwLDBdXVxuICAgICk7XG5cbiAgICBkZWZpbmVDb2xvcihcbiAgICAgICdyZWQnLFxuICAgICAgWy0yNiwxOF0sXG4gICAgICBbWzIwLDEwMF0sWzMwLDkyXSxbNDAsODldLFs1MCw4NV0sWzYwLDc4XSxbNzAsNzBdLFs4MCw2MF0sWzkwLDU1XSxbMTAwLDUwXV1cbiAgICApO1xuXG4gICAgZGVmaW5lQ29sb3IoXG4gICAgICAnb3JhbmdlJyxcbiAgICAgIFsxOSw0Nl0sXG4gICAgICBbWzIwLDEwMF0sWzMwLDkzXSxbNDAsODhdLFs1MCw4Nl0sWzYwLDg1XSxbNzAsNzBdLFsxMDAsNzBdXVxuICAgICk7XG5cbiAgICBkZWZpbmVDb2xvcihcbiAgICAgICd5ZWxsb3cnLFxuICAgICAgWzQ3LDYyXSxcbiAgICAgIFtbMjUsMTAwXSxbNDAsOTRdLFs1MCw4OV0sWzYwLDg2XSxbNzAsODRdLFs4MCw4Ml0sWzkwLDgwXSxbMTAwLDc1XV1cbiAgICApO1xuXG4gICAgZGVmaW5lQ29sb3IoXG4gICAgICAnZ3JlZW4nLFxuICAgICAgWzYzLDE3OF0sXG4gICAgICBbWzMwLDEwMF0sWzQwLDkwXSxbNTAsODVdLFs2MCw4MV0sWzcwLDc0XSxbODAsNjRdLFs5MCw1MF0sWzEwMCw0MF1dXG4gICAgKTtcblxuICAgIGRlZmluZUNvbG9yKFxuICAgICAgJ2JsdWUnLFxuICAgICAgWzE3OSwgMjU3XSxcbiAgICAgIFtbMjAsMTAwXSxbMzAsODZdLFs0MCw4MF0sWzUwLDc0XSxbNjAsNjBdLFs3MCw1Ml0sWzgwLDQ0XSxbOTAsMzldLFsxMDAsMzVdXVxuICAgICk7XG5cbiAgICBkZWZpbmVDb2xvcihcbiAgICAgICdwdXJwbGUnLFxuICAgICAgWzI1OCwgMjgyXSxcbiAgICAgIFtbMjAsMTAwXSxbMzAsODddLFs0MCw3OV0sWzUwLDcwXSxbNjAsNjVdLFs3MCw1OV0sWzgwLDUyXSxbOTAsNDVdLFsxMDAsNDJdXVxuICAgICk7XG5cbiAgICBkZWZpbmVDb2xvcihcbiAgICAgICdwaW5rJyxcbiAgICAgIFsyODMsIDMzNF0sXG4gICAgICBbWzIwLDEwMF0sWzMwLDkwXSxbNDAsODZdLFs2MCw4NF0sWzgwLDgwXSxbOTAsNzVdLFsxMDAsNzNdXVxuICAgICk7XG5cbiAgfVxuXG4gIGZ1bmN0aW9uIEhTVnRvUkdCIChoc3YpIHtcblxuICAgIC8vIHRoaXMgZG9lc24ndCB3b3JrIGZvciB0aGUgdmFsdWVzIG9mIDAgYW5kIDM2MFxuICAgIC8vIGhlcmUncyB0aGUgaGFja3kgZml4XG4gICAgdmFyIGggPSBoc3ZbMF07XG4gICAgaWYgKGggPT09IDApIHtoID0gMTt9XG4gICAgaWYgKGggPT09IDM2MCkge2ggPSAzNTk7fVxuXG4gICAgLy8gUmViYXNlIHRoZSBoLHMsdiB2YWx1ZXNcbiAgICBoID0gaC8zNjA7XG4gICAgdmFyIHMgPSBoc3ZbMV0vMTAwLFxuICAgICAgICB2ID0gaHN2WzJdLzEwMDtcblxuICAgIHZhciBoX2kgPSBNYXRoLmZsb29yKGgqNiksXG4gICAgICBmID0gaCAqIDYgLSBoX2ksXG4gICAgICBwID0gdiAqICgxIC0gcyksXG4gICAgICBxID0gdiAqICgxIC0gZipzKSxcbiAgICAgIHQgPSB2ICogKDEgLSAoMSAtIGYpKnMpLFxuICAgICAgciA9IDI1NixcbiAgICAgIGcgPSAyNTYsXG4gICAgICBiID0gMjU2O1xuXG4gICAgc3dpdGNoKGhfaSkge1xuICAgICAgY2FzZSAwOiByID0gdjsgZyA9IHQ7IGIgPSBwOyAgYnJlYWs7XG4gICAgICBjYXNlIDE6IHIgPSBxOyBnID0gdjsgYiA9IHA7ICBicmVhaztcbiAgICAgIGNhc2UgMjogciA9IHA7IGcgPSB2OyBiID0gdDsgIGJyZWFrO1xuICAgICAgY2FzZSAzOiByID0gcDsgZyA9IHE7IGIgPSB2OyAgYnJlYWs7XG4gICAgICBjYXNlIDQ6IHIgPSB0OyBnID0gcDsgYiA9IHY7ICBicmVhaztcbiAgICAgIGNhc2UgNTogciA9IHY7IGcgPSBwOyBiID0gcTsgIGJyZWFrO1xuICAgIH1cblxuICAgIHZhciByZXN1bHQgPSBbTWF0aC5mbG9vcihyKjI1NSksIE1hdGguZmxvb3IoZyoyNTUpLCBNYXRoLmZsb29yKGIqMjU1KV07XG4gICAgcmV0dXJuIHJlc3VsdDtcbiAgfVxuXG4gIGZ1bmN0aW9uIEhleFRvSFNCIChoZXgpIHtcbiAgICBoZXggPSBoZXgucmVwbGFjZSgvXiMvLCAnJyk7XG4gICAgaGV4ID0gaGV4Lmxlbmd0aCA9PT0gMyA/IGhleC5yZXBsYWNlKC8oLikvZywgJyQxJDEnKSA6IGhleDtcblxuICAgIHZhciByZWQgPSBwYXJzZUludChoZXguc3Vic3RyKDAsIDIpLCAxNikgLyAyNTUsXG4gICAgICAgICAgZ3JlZW4gPSBwYXJzZUludChoZXguc3Vic3RyKDIsIDIpLCAxNikgLyAyNTUsXG4gICAgICAgICAgYmx1ZSA9IHBhcnNlSW50KGhleC5zdWJzdHIoNCwgMiksIDE2KSAvIDI1NTtcblxuICAgIHZhciBjTWF4ID0gTWF0aC5tYXgocmVkLCBncmVlbiwgYmx1ZSksXG4gICAgICAgICAgZGVsdGEgPSBjTWF4IC0gTWF0aC5taW4ocmVkLCBncmVlbiwgYmx1ZSksXG4gICAgICAgICAgc2F0dXJhdGlvbiA9IGNNYXggPyAoZGVsdGEgLyBjTWF4KSA6IDA7XG5cbiAgICBzd2l0Y2ggKGNNYXgpIHtcbiAgICAgIGNhc2UgcmVkOiByZXR1cm4gWyA2MCAqICgoKGdyZWVuIC0gYmx1ZSkgLyBkZWx0YSkgJSA2KSB8fCAwLCBzYXR1cmF0aW9uLCBjTWF4IF07XG4gICAgICBjYXNlIGdyZWVuOiByZXR1cm4gWyA2MCAqICgoKGJsdWUgLSByZWQpIC8gZGVsdGEpICsgMikgfHwgMCwgc2F0dXJhdGlvbiwgY01heCBdO1xuICAgICAgY2FzZSBibHVlOiByZXR1cm4gWyA2MCAqICgoKHJlZCAtIGdyZWVuKSAvIGRlbHRhKSArIDQpIHx8IDAsIHNhdHVyYXRpb24sIGNNYXggXTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBIU1Z0b0hTTCAoaHN2KSB7XG4gICAgdmFyIGggPSBoc3ZbMF0sXG4gICAgICBzID0gaHN2WzFdLzEwMCxcbiAgICAgIHYgPSBoc3ZbMl0vMTAwLFxuICAgICAgayA9ICgyLXMpKnY7XG5cbiAgICByZXR1cm4gW1xuICAgICAgaCxcbiAgICAgIE1hdGgucm91bmQocyp2IC8gKGs8MSA/IGsgOiAyLWspICogMTAwMDApIC8gMTAwLFxuICAgICAgay8yICogMTAwXG4gICAgXTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0cmluZ1RvSW50ZWdlciAoc3RyaW5nKSB7XG4gICAgdmFyIHRvdGFsID0gMFxuICAgIGZvciAodmFyIGkgPSAwOyBpICE9PSBzdHJpbmcubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmICh0b3RhbCA+PSBOdW1iZXIuTUFYX1NBRkVfSU5URUdFUikgYnJlYWs7XG4gICAgICB0b3RhbCArPSBzdHJpbmcuY2hhckNvZGVBdChpKVxuICAgIH1cbiAgICByZXR1cm4gdG90YWxcbiAgfVxuXG4gIC8vIGdldCBUaGUgcmFuZ2Ugb2YgZ2l2ZW4gaHVlIHdoZW4gb3B0aW9ucy5jb3VudCE9MFxuICBmdW5jdGlvbiBnZXRSZWFsSHVlUmFuZ2UoY29sb3JIdWUpXG4gIHsgaWYgKCFpc05hTihjb2xvckh1ZSkpIHtcbiAgICB2YXIgbnVtYmVyID0gcGFyc2VJbnQoY29sb3JIdWUpO1xuXG4gICAgaWYgKG51bWJlciA8IDM2MCAmJiBudW1iZXIgPiAwKSB7XG4gICAgICByZXR1cm4gZ2V0Q29sb3JJbmZvKGNvbG9ySHVlKS5odWVSYW5nZVxuICAgIH1cbiAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBjb2xvckh1ZSA9PT0gJ3N0cmluZycpIHtcblxuICAgICAgaWYgKGNvbG9yRGljdGlvbmFyeVtjb2xvckh1ZV0pIHtcbiAgICAgICAgdmFyIGNvbG9yID0gY29sb3JEaWN0aW9uYXJ5W2NvbG9ySHVlXTtcblxuICAgICAgICBpZiAoY29sb3IuaHVlUmFuZ2UpIHtcbiAgICAgICAgICByZXR1cm4gY29sb3IuaHVlUmFuZ2VcbiAgICAgICB9XG4gICAgfSBlbHNlIGlmIChjb2xvckh1ZS5tYXRjaCgvXiM/KFswLTlBLUZdezN9fFswLTlBLUZdezZ9KSQvaSkpIHtcbiAgICAgICAgdmFyIGh1ZSA9IEhleFRvSFNCKGNvbG9ySHVlKVswXVxuICAgICAgICByZXR1cm4gZ2V0Q29sb3JJbmZvKGh1ZSkuaHVlUmFuZ2VcbiAgICB9XG4gIH1cblxuICAgIHJldHVybiBbMCwzNjBdXG59XG4gIHJldHVybiByYW5kb21Db2xvcjtcbn0pKTtcbiIsIm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24obW9kdWxlKSB7XG5cdGlmICghbW9kdWxlLndlYnBhY2tQb2x5ZmlsbCkge1xuXHRcdG1vZHVsZS5kZXByZWNhdGUgPSBmdW5jdGlvbigpIHt9O1xuXHRcdG1vZHVsZS5wYXRocyA9IFtdO1xuXHRcdC8vIG1vZHVsZS5wYXJlbnQgPSB1bmRlZmluZWQgYnkgZGVmYXVsdFxuXHRcdGlmICghbW9kdWxlLmNoaWxkcmVuKSBtb2R1bGUuY2hpbGRyZW4gPSBbXTtcblx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkobW9kdWxlLCBcImxvYWRlZFwiLCB7XG5cdFx0XHRlbnVtZXJhYmxlOiB0cnVlLFxuXHRcdFx0Z2V0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuIG1vZHVsZS5sO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShtb2R1bGUsIFwiaWRcIiwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGdldDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBtb2R1bGUuaTtcblx0XHRcdH1cblx0XHR9KTtcblx0XHRtb2R1bGUud2VicGFja1BvbHlmaWxsID0gMTtcblx0fVxuXHRyZXR1cm4gbW9kdWxlO1xufTtcbiJdLCJzb3VyY2VSb290IjoiIn0=